
usartF7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005064  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005244  08005244  00006244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005364  08005364  00006364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800536c  0800536c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005370  08005370  00006370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005374  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e8c  2000000c  08005380  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e98  08005380  00007e98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fc2  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb5  00000000  00000000  00017ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0001abb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b3  00000000  00000000  0001b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d46  00000000  00000000  0001c233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124e0  00000000  00000000  0003ef79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3e0d  00000000  00000000  00051459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125266  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003310  00000000  00000000  001252ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001285bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800522c 	.word	0x0800522c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	0800522c 	.word	0x0800522c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <crc8ccitt>:
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83,
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB,
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3
};

uint8_t crc8ccitt(const void * data, size_t size) {
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
	uint8_t val = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	75fb      	strb	r3, [r7, #23]

	uint8_t * pos = (uint8_t *) data;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	613b      	str	r3, [r7, #16]
	uint8_t * end = pos + size;
 8000522:	693a      	ldr	r2, [r7, #16]
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	4413      	add	r3, r2
 8000528:	60fb      	str	r3, [r7, #12]

	while (pos < end) {
 800052a:	e00b      	b.n	8000544 <crc8ccitt+0x34>
		val = CRC_TABLE[val ^ *pos];
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	7dfb      	ldrb	r3, [r7, #23]
 8000532:	4053      	eors	r3, r2
 8000534:	b2db      	uxtb	r3, r3
 8000536:	461a      	mov	r2, r3
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <crc8ccitt+0x4c>)
 800053a:	5c9b      	ldrb	r3, [r3, r2]
 800053c:	75fb      	strb	r3, [r7, #23]
		pos++;
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	3301      	adds	r3, #1
 8000542:	613b      	str	r3, [r7, #16]
	while (pos < end) {
 8000544:	693a      	ldr	r2, [r7, #16]
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	429a      	cmp	r2, r3
 800054a:	d3ef      	bcc.n	800052c <crc8ccitt+0x1c>
	}

	return val;
 800054c:	7dfb      	ldrb	r3, [r7, #23]
}
 800054e:	4618      	mov	r0, r3
 8000550:	371c      	adds	r7, #28
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	08005244 	.word	0x08005244

08000560 <frame_parser_create>:

#define MSG_PREFIX		4
#define MSG_SUBFIX		3

/* Returns number of frame bytes */
uint8_t frame_parser_create(uint8_t *rawFrame, usartMessage_t *message) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	uint8_t crc;
	uint8_t idx = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	73bb      	strb	r3, [r7, #14]
	if (message->len > MAX_PAYLOAD_SIZE) {
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8000574:	2ba0      	cmp	r3, #160	@ 0xa0
 8000576:	d901      	bls.n	800057c <frame_parser_create+0x1c>
		// payload out of score
		return 0;
 8000578:	2300      	movs	r3, #0
 800057a:	e066      	b.n	800064a <frame_parser_create+0xea>
	}
	rawFrame[idx++] = SOF_CHAR;
 800057c:	7bbb      	ldrb	r3, [r7, #14]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	73ba      	strb	r2, [r7, #14]
 8000582:	461a      	mov	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	22be      	movs	r2, #190	@ 0xbe
 800058a:	701a      	strb	r2, [r3, #0]
	rawFrame[idx++] = message->addr;
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	73ba      	strb	r2, [r7, #14]
 8000592:	461a      	mov	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	701a      	strb	r2, [r3, #0]
	rawFrame[idx++] = message->cmd;
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	73ba      	strb	r2, [r7, #14]
 80005a4:	461a      	mov	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	7852      	ldrb	r2, [r2, #1]
 80005ae:	701a      	strb	r2, [r3, #0]
	rawFrame[idx++] = message->arg;
 80005b0:	7bbb      	ldrb	r3, [r7, #14]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	73ba      	strb	r2, [r7, #14]
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	7892      	ldrb	r2, [r2, #2]
 80005c0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < message->len; i++) {
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]
 80005c6:	e00d      	b.n	80005e4 <frame_parser_create+0x84>
		rawFrame[idx + i] = message->payload[i];
 80005c8:	7bfa      	ldrb	r2, [r7, #15]
 80005ca:	7bb9      	ldrb	r1, [r7, #14]
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	440b      	add	r3, r1
 80005d0:	4619      	mov	r1, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	440b      	add	r3, r1
 80005d6:	6839      	ldr	r1, [r7, #0]
 80005d8:	440a      	add	r2, r1
 80005da:	78d2      	ldrb	r2, [r2, #3]
 80005dc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < message->len; i++) {
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3301      	adds	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80005ea:	7bfa      	ldrb	r2, [r7, #15]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d3eb      	bcc.n	80005c8 <frame_parser_create+0x68>
	}
	idx = idx + message->len;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	f893 20a3 	ldrb.w	r2, [r3, #163]	@ 0xa3
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	4413      	add	r3, r2
 80005fa:	73bb      	strb	r3, [r7, #14]
	rawFrame[idx++] = message->len;
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	73ba      	strb	r2, [r7, #14]
 8000602:	461a      	mov	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4413      	add	r3, r2
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	f892 20a3 	ldrb.w	r2, [r2, #163]	@ 0xa3
 800060e:	701a      	strb	r2, [r3, #0]
	crc = crc8ccitt(rawFrame + 1, message->len + 4);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800061a:	3304      	adds	r3, #4
 800061c:	4619      	mov	r1, r3
 800061e:	4610      	mov	r0, r2
 8000620:	f7ff ff76 	bl	8000510 <crc8ccitt>
 8000624:	4603      	mov	r3, r0
 8000626:	737b      	strb	r3, [r7, #13]
	rawFrame[idx++] = crc;
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	73ba      	strb	r2, [r7, #14]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	7b7a      	ldrb	r2, [r7, #13]
 8000636:	701a      	strb	r2, [r3, #0]
	rawFrame[idx++] = EOF_CHAR;
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	73ba      	strb	r2, [r7, #14]
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4413      	add	r3, r2
 8000644:	22bf      	movs	r2, #191	@ 0xbf
 8000646:	701a      	strb	r2, [r3, #0]
	return idx;
 8000648:	7bbb      	ldrb	r3, [r7, #14]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <frame_parser_analyze>:

HAL_StatusTypeDef frame_parser_analyze(uint8_t *rawFrame, uint8_t size, usartMessage_t *message) {
 8000652:	b580      	push	{r7, lr}
 8000654:	b086      	sub	sp, #24
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	460b      	mov	r3, r1
 800065c:	607a      	str	r2, [r7, #4]
 800065e:	72fb      	strb	r3, [r7, #11]

	/*	the frame:		|SOF|ADDR|CMD|ARG|PAYLOAD|LEN|CRC|EOF| 		*/
	/*	size in bytes:	| 1 | 1 | 1 | 1 | 0 - 160| 1 | 1 | 1 |		*/
	uint8_t payloadLen = size - MSG_PREFIX - MSG_SUBFIX;
 8000660:	7afb      	ldrb	r3, [r7, #11]
 8000662:	3b07      	subs	r3, #7
 8000664:	75bb      	strb	r3, [r7, #22]
	// check payload size
	uint8_t readSize = rawFrame[MSG_PREFIX + payloadLen];
 8000666:	7dbb      	ldrb	r3, [r7, #22]
 8000668:	3304      	adds	r3, #4
 800066a:	461a      	mov	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	757b      	strb	r3, [r7, #21]
	if (payloadLen != readSize) {
 8000674:	7dba      	ldrb	r2, [r7, #22]
 8000676:	7d7b      	ldrb	r3, [r7, #21]
 8000678:	429a      	cmp	r2, r3
 800067a:	d001      	beq.n	8000680 <frame_parser_analyze+0x2e>
		//message is corrupted: payload size differs from expected.
		return HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	e03e      	b.n	80006fe <frame_parser_analyze+0xac>
	}

	// get payload from raw buffer
	for (uint8_t i = 0; i < payloadLen; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	75fb      	strb	r3, [r7, #23]
 8000684:	e00d      	b.n	80006a2 <frame_parser_analyze+0x50>
		message->payload[i] = rawFrame[MSG_PREFIX + i];
 8000686:	7dfb      	ldrb	r3, [r7, #23]
 8000688:	3304      	adds	r3, #4
 800068a:	461a      	mov	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	441a      	add	r2, r3
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	7811      	ldrb	r1, [r2, #0]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	460a      	mov	r2, r1
 800069a:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < payloadLen; i++) {
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	3301      	adds	r3, #1
 80006a0:	75fb      	strb	r3, [r7, #23]
 80006a2:	7dfa      	ldrb	r2, [r7, #23]
 80006a4:	7dbb      	ldrb	r3, [r7, #22]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d3ed      	bcc.n	8000686 <frame_parser_analyze+0x34>
	}

	// check if crc is ok
	uint8_t crcCode = crc8ccitt(rawFrame + 1, size - 3);
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	7afb      	ldrb	r3, [r7, #11]
 80006b0:	3b03      	subs	r3, #3
 80006b2:	4619      	mov	r1, r3
 80006b4:	4610      	mov	r0, r2
 80006b6:	f7ff ff2b 	bl	8000510 <crc8ccitt>
 80006ba:	4603      	mov	r3, r0
 80006bc:	753b      	strb	r3, [r7, #20]
	if (rawFrame[MSG_PREFIX + payloadLen + 1] != crcCode) {
 80006be:	7dbb      	ldrb	r3, [r7, #22]
 80006c0:	3305      	adds	r3, #5
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	7d3a      	ldrb	r2, [r7, #20]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d001      	beq.n	80006d2 <frame_parser_analyze+0x80>
//		crc is not equal
		return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e015      	b.n	80006fe <frame_parser_analyze+0xac>
	}

//	everything is ok.
	message->addr 	= rawFrame[1];
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	785a      	ldrb	r2, [r3, #1]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	701a      	strb	r2, [r3, #0]
	message->cmd 	= rawFrame[2];
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	789a      	ldrb	r2, [r3, #2]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	705a      	strb	r2, [r3, #1]
	message->arg 	= rawFrame[3];
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	78da      	ldrb	r2, [r3, #3]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	709a      	strb	r2, [r3, #2]
	message->len	= rawFrame[MSG_PREFIX + payloadLen];
 80006ea:	7dbb      	ldrb	r3, [r7, #22]
 80006ec:	3304      	adds	r3, #4
 80006ee:	461a      	mov	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0fe      	sub	sp, #504	@ 0x1f8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f000 fe86 	bl	800141e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000712:	f000 f86f 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000716:	f000 f991 	bl	8000a3c <MX_GPIO_Init>
  MX_DMA_Init();
 800071a:	f000 f969 	bl	80009f0 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800071e:	f000 f937 	bl	8000990 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8000722:	f000 f8d5 	bl	80008d0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000726:	f000 f903 	bl	8000930 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t frameToSend[MAX_FRAME_SIZE];
  usart_dma_init(&huart6);
 800072a:	4831      	ldr	r0, [pc, #196]	@ (80007f0 <main+0xe8>)
 800072c:	f000 fd32 	bl	8001194 <usart_dma_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  usartMessage_t message;
	  message = usart_dma_frameProcess();
 8000730:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000734:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fd75 	bl	8001228 <usart_dma_frameProcess>

	  // Data to send
	  usartMessage_t dataToSend = {
 800073e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000742:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000746:	4618      	mov	r0, r3
 8000748:	23a4      	movs	r3, #164	@ 0xa4
 800074a:	461a      	mov	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f004 fd32 	bl	80051b6 <memset>
 8000752:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000756:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000762:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000766:	2203      	movs	r2, #3
 8000768:	705a      	strb	r2, [r3, #1]
 800076a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800076e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000772:	2202      	movs	r2, #2
 8000774:	709a      	strb	r2, [r3, #2]
	  	  				  .arg = 2,
	  	  				  .cmd = 3,
	  };
	  //	  memcpy(dataToSend.payload, "HelloWorld", sizeof("HelloWorld"));
	  //	  dataToSend.len = sizeof("HelloWorld");
	  for (uint8_t z = 0; z < MAX_PAYLOAD_SIZE; z++) {
 8000776:	2300      	movs	r3, #0
 8000778:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7
 800077c:	e00e      	b.n	800079c <main+0x94>
		  dataToSend.payload[z] = z;
 800077e:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8000782:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 8000786:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 800078a:	4413      	add	r3, r2
 800078c:	f897 21f7 	ldrb.w	r2, [r7, #503]	@ 0x1f7
 8000790:	70da      	strb	r2, [r3, #3]
	  for (uint8_t z = 0; z < MAX_PAYLOAD_SIZE; z++) {
 8000792:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8000796:	3301      	adds	r3, #1
 8000798:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7
 800079c:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 80007a0:	2b9f      	cmp	r3, #159	@ 0x9f
 80007a2:	d9ec      	bls.n	800077e <main+0x76>
	  }
	  dataToSend.len = MAX_PAYLOAD_SIZE;
 80007a4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80007a8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80007ac:	22a0      	movs	r2, #160	@ 0xa0
 80007ae:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	  // parse into frame
	  memset(frameToSend, 0, MAX_FRAME_SIZE);
 80007b2:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80007b6:	22a7      	movs	r2, #167	@ 0xa7
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f004 fcfb 	bl	80051b6 <memset>
	  uint8_t frameSize = frame_parser_create(frameToSend, &dataToSend);
 80007c0:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80007c4:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fec8 	bl	8000560 <frame_parser_create>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f887 31f6 	strb.w	r3, [r7, #502]	@ 0x1f6

	  // send over usart
	  usart_dma_SendFrame(frameToSend, frameSize);
 80007d6:	f897 21f6 	ldrb.w	r2, [r7, #502]	@ 0x1f6
 80007da:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fcf9 	bl	80011d8 <usart_dma_SendFrame>
	  HAL_Delay(500);
 80007e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ea:	f000 fe75 	bl	80014d8 <HAL_Delay>
  {
 80007ee:	e79f      	b.n	8000730 <main+0x28>
 80007f0:	200000b0 	.word	0x200000b0

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	@ 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	@ 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f004 fcd7 	bl	80051b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000818:	f001 fe8e 	bl	8002538 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	4b2a      	ldr	r3, [pc, #168]	@ (80008c8 <SystemClock_Config+0xd4>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	4a29      	ldr	r2, [pc, #164]	@ (80008c8 <SystemClock_Config+0xd4>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	@ 0x40
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <SystemClock_Config+0xd4>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <SystemClock_Config+0xd8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a24      	ldr	r2, [pc, #144]	@ (80008cc <SystemClock_Config+0xd8>)
 800083a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <SystemClock_Config+0xd8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800085e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000864:	23d8      	movs	r3, #216	@ 0xd8
 8000866:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800086c:	2309      	movs	r3, #9
 800086e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4618      	mov	r0, r3
 8000876:	f001 febf 	bl	80025f8 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000880:	f000 f97e 	bl	8000b80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000884:	f001 fe68 	bl	8002558 <HAL_PWREx_EnableOverDrive>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800088e:	f000 f977 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2107      	movs	r1, #7
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 f945 	bl	8002b40 <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008bc:	f000 f960 	bl	8000b80 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3750      	adds	r7, #80	@ 0x50
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	@ (800092c <MX_USART3_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 8000914:	f002 fe84 	bl	8003620 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f92f 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000028 	.word	0x20000028
 800092c:	40004800 	.word	0x40004800

08000930 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000934:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_USART6_UART_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	@ (800098c <MX_USART6_UART_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800093a:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <MX_USART6_UART_Init+0x58>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_USART6_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_USART6_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_USART6_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_USART6_UART_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <MX_USART6_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_USART6_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <MX_USART6_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_USART6_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_USART6_UART_Init+0x58>)
 8000974:	f002 fe54 	bl	8003620 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f8ff 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000b0 	.word	0x200000b0
 800098c:	40011400 	.word	0x40011400

08000990 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000996:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800099a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800099c:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099e:	2206      	movs	r2, #6
 80009a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009a2:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009a8:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009da:	f001 fc72 	bl	80022c2 <HAL_PCD_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80009e4:	f000 f8cc 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200001f8 	.word	0x200001f8

080009f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_DMA_Init+0x48>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <MX_DMA_Init+0x48>)
 80009fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <MX_DMA_Init+0x48>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2039      	movs	r0, #57	@ 0x39
 8000a14:	f000 fe5f 	bl	80016d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a18:	2039      	movs	r0, #57	@ 0x39
 8000a1a:	f000 fe78 	bl	800170e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2045      	movs	r0, #69	@ 0x45
 8000a24:	f000 fe57 	bl	80016d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a28:	2045      	movs	r0, #69	@ 0x45
 8000a2a:	f000 fe70 	bl	800170e <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	@ 0x30
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b47      	ldr	r3, [pc, #284]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a46      	ldr	r2, [pc, #280]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b44      	ldr	r3, [pc, #272]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	4b41      	ldr	r3, [pc, #260]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a40      	ldr	r2, [pc, #256]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b3e      	ldr	r3, [pc, #248]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a3a      	ldr	r2, [pc, #232]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b38      	ldr	r3, [pc, #224]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a34      	ldr	r2, [pc, #208]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b32      	ldr	r3, [pc, #200]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a2e      	ldr	r2, [pc, #184]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b29      	ldr	r3, [pc, #164]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a28      	ldr	r2, [pc, #160]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <MX_GPIO_Init+0x134>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ae8:	4822      	ldr	r0, [pc, #136]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000aea:	f001 fbd1 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2140      	movs	r1, #64	@ 0x40
 8000af2:	4821      	ldr	r0, [pc, #132]	@ (8000b78 <MX_GPIO_Init+0x13c>)
 8000af4:	f001 fbcc 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000af8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481b      	ldr	r0, [pc, #108]	@ (8000b7c <MX_GPIO_Init+0x140>)
 8000b10:	f001 fa22 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b14:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4811      	ldr	r0, [pc, #68]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000b2e:	f001 fa13 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b32:	2340      	movs	r3, #64	@ 0x40
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	480b      	ldr	r0, [pc, #44]	@ (8000b78 <MX_GPIO_Init+0x13c>)
 8000b4a:	f001 fa05 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_GPIO_Init+0x13c>)
 8000b62:	f001 f9f9 	bl	8001f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b66:	bf00      	nop
 8000b68:	3730      	adds	r7, #48	@ 0x30
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020400 	.word	0x40020400
 8000b78:	40021800 	.word	0x40021800
 8000b7c:	40020800 	.word	0x40020800

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <RB_read>:
 *  Created on: Feb 12, 2025
 *      Author: mikop
 */
#include "ring_buf.h"

HAL_StatusTypeDef RB_read(ringBuffer_t *ringBuf, uint8_t *val) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	if (ringBuf->head == ringBuf->tail) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	881a      	ldrh	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	885b      	ldrh	r3, [r3, #2]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d101      	bne.n	8000ba6 <RB_read+0x1a>
		return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e015      	b.n	8000bd2 <RB_read+0x46>
	}

	*val = ringBuf->buffer[ringBuf->tail];
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	885b      	ldrh	r3, [r3, #2]
 8000baa:	461a      	mov	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	791a      	ldrb	r2, [r3, #4]
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	701a      	strb	r2, [r3, #0]
	ringBuf->tail = (ringBuf->tail + 1) % RING_BUFFER_SIZE;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	885b      	ldrh	r3, [r3, #2]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	425a      	negs	r2, r3
 8000bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bc6:	bf58      	it	pl
 8000bc8:	4253      	negpl	r3, r2
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	805a      	strh	r2, [r3, #2]
	return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <RB_write>:

HAL_StatusTypeDef RB_write(ringBuffer_t *ringBuf, uint8_t val) {
 8000bde:	b480      	push	{r7}
 8000be0:	b085      	sub	sp, #20
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	460b      	mov	r3, r1
 8000be8:	70fb      	strb	r3, [r7, #3]

	uint16_t tempHead = (ringBuf->head + 1) % RING_BUFFER_SIZE;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	425a      	negs	r2, r3
 8000bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bfa:	bf58      	it	pl
 8000bfc:	4253      	negpl	r3, r2
 8000bfe:	81fb      	strh	r3, [r7, #14]
	if (tempHead == ringBuf->tail) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	885b      	ldrh	r3, [r3, #2]
 8000c04:	89fa      	ldrh	r2, [r7, #14]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d101      	bne.n	8000c0e <RB_write+0x30>
		return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00a      	b.n	8000c24 <RB_write+0x46>
	}

	ringBuf->buffer[ringBuf->head] = val;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4413      	add	r3, r2
 8000c18:	78fa      	ldrb	r2, [r7, #3]
 8000c1a:	711a      	strb	r2, [r3, #4]
	ringBuf->head = tempHead;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	89fa      	ldrh	r2, [r7, #14]
 8000c20:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c42:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	4a08      	ldr	r2, [pc, #32]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0ac      	sub	sp, #176	@ 0xb0
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	2280      	movs	r2, #128	@ 0x80
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 fa8c 	bl	80051b6 <memset>
  if(huart->Instance==USART3)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a75      	ldr	r2, [pc, #468]	@ (8000e78 <HAL_UART_MspInit+0x200>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d13d      	bne.n	8000d24 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ca8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 f968 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cc2:	f7ff ff5d 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	4a6c      	ldr	r2, [pc, #432]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	4b67      	ldr	r3, [pc, #412]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a66      	ldr	r2, [pc, #408]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b64      	ldr	r3, [pc, #400]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d10:	2307      	movs	r3, #7
 8000d12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4858      	ldr	r0, [pc, #352]	@ (8000e80 <HAL_UART_MspInit+0x208>)
 8000d1e:	f001 f91b 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d22:	e0a5      	b.n	8000e70 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART6)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a56      	ldr	r2, [pc, #344]	@ (8000e84 <HAL_UART_MspInit+0x20c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	f040 80a0 	bne.w	8000e70 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000d30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d34:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d36:	2300      	movs	r3, #0
 8000d38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 f924 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8000d4a:	f7ff ff19 	bl	8000b80 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d4e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	4a4a      	ldr	r2, [pc, #296]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5a:	4b48      	ldr	r3, [pc, #288]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	f003 0320 	and.w	r3, r3, #32
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b45      	ldr	r3, [pc, #276]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a44      	ldr	r2, [pc, #272]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b42      	ldr	r3, [pc, #264]	@ (8000e7c <HAL_UART_MspInit+0x204>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7e:	23c0      	movs	r3, #192	@ 0xc0
 8000d80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d96:	2308      	movs	r3, #8
 8000d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000da0:	4619      	mov	r1, r3
 8000da2:	4839      	ldr	r0, [pc, #228]	@ (8000e88 <HAL_UART_MspInit+0x210>)
 8000da4:	f001 f8d8 	bl	8001f58 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000da8:	4b38      	ldr	r3, [pc, #224]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000daa:	4a39      	ldr	r2, [pc, #228]	@ (8000e90 <HAL_UART_MspInit+0x218>)
 8000dac:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000dae:	4b37      	ldr	r3, [pc, #220]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000db0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8000db4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db6:	4b35      	ldr	r3, [pc, #212]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dbc:	4b33      	ldr	r3, [pc, #204]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc2:	4b32      	ldr	r3, [pc, #200]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000dc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dc8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dca:	4b30      	ldr	r3, [pc, #192]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000de8:	4828      	ldr	r0, [pc, #160]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000dea:	f000 fcab 	bl	8001744 <HAL_DMA_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8000df4:	f7ff fec4 	bl	8000b80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a24      	ldr	r2, [pc, #144]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000dfc:	675a      	str	r2, [r3, #116]	@ 0x74
 8000dfe:	4a23      	ldr	r2, [pc, #140]	@ (8000e8c <HAL_UART_MspInit+0x214>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000e04:	4b23      	ldr	r3, [pc, #140]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e06:	4a24      	ldr	r2, [pc, #144]	@ (8000e98 <HAL_UART_MspInit+0x220>)
 8000e08:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000e0a:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e0c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8000e10:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e12:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e14:	2240      	movs	r2, #64	@ 0x40
 8000e16:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e24:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000e44:	4813      	ldr	r0, [pc, #76]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e46:	f000 fc7d 	bl	8001744 <HAL_DMA_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8000e50:	f7ff fe96 	bl	8000b80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a0f      	ldr	r2, [pc, #60]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e58:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e94 <HAL_UART_MspInit+0x21c>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2047      	movs	r0, #71	@ 0x47
 8000e66:	f000 fc36 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e6a:	2047      	movs	r0, #71	@ 0x47
 8000e6c:	f000 fc4f 	bl	800170e <HAL_NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	37b0      	adds	r7, #176	@ 0xb0
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40004800 	.word	0x40004800
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	40011400 	.word	0x40011400
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	20000138 	.word	0x20000138
 8000e90:	40026428 	.word	0x40026428
 8000e94:	20000198 	.word	0x20000198
 8000e98:	400264a0 	.word	0x400264a0

08000e9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0aa      	sub	sp, #168	@ 0xa8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2280      	movs	r2, #128	@ 0x80
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 f97a 	bl	80051b6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eca:	d159      	bne.n	8000f80 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ecc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ed0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 f855 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ee8:	f7ff fe4a 	bl	8000b80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <HAL_PCD_MspInit+0xec>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef0:	4a25      	ldr	r2, [pc, #148]	@ (8000f88 <HAL_PCD_MspInit+0xec>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef8:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <HAL_PCD_MspInit+0xec>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f04:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f1e:	230a      	movs	r3, #10
 8000f20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4818      	ldr	r0, [pc, #96]	@ (8000f8c <HAL_PCD_MspInit+0xf0>)
 8000f2c:	f001 f814 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4810      	ldr	r0, [pc, #64]	@ (8000f8c <HAL_PCD_MspInit+0xf0>)
 8000f4c:	f001 f804 	bl	8001f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f50:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <HAL_PCD_MspInit+0xec>)
 8000f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f54:	4a0c      	ldr	r2, [pc, #48]	@ (8000f88 <HAL_PCD_MspInit+0xec>)
 8000f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f5a:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_PCD_MspInit+0xec>)
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <HAL_PCD_MspInit+0xec>)
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6c:	4a06      	ldr	r2, [pc, #24]	@ (8000f88 <HAL_PCD_MspInit+0xec>)
 8000f6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f72:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <HAL_PCD_MspInit+0xec>)
 8000f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	37a8      	adds	r7, #168	@ 0xa8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <NMI_Handler+0x4>

08000f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe6:	f000 fa57 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <DMA2_Stream1_IRQHandler+0x10>)
 8000ff6:	f000 fd45 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000138 	.word	0x20000138

08001004 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <DMA2_Stream6_IRQHandler+0x10>)
 800100a:	f000 fd3b 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000198 	.word	0x20000198

08001018 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <USART6_IRQHandler+0x10>)
 800101e:	f002 fbc9 	bl	80037b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000b0 	.word	0x200000b0

0800102c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <SystemInit+0x20>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <SystemInit+0x20>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <HAL_UARTEx_RxEventCallback>:
UART_HandleTypeDef *huartHandler;

HAL_StatusTypeDef uart_Send();

// Receiving done - CB
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART6) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a34      	ldr	r2, [pc, #208]	@ (8001134 <HAL_UARTEx_RxEventCallback+0xe4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d14e      	bne.n	8001104 <HAL_UARTEx_RxEventCallback+0xb4>
		static uint8_t start = 0;
		// assuming that data can be send with delays - CB from IDLE
		static uint8_t tempBuf[MAX_FRAME_SIZE];
		static uint8_t tempPos = 0;

		for (uint8_t i = 0; i < Size; i++) {
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e046      	b.n	80010fa <HAL_UARTEx_RxEventCallback+0xaa>
			// do not save trash data to RB
			if (rcvBuffer[i] == SOF_CHAR || start == 1) {
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4a32      	ldr	r2, [pc, #200]	@ (8001138 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	2bbe      	cmp	r3, #190	@ 0xbe
 8001074:	d003      	beq.n	800107e <HAL_UARTEx_RxEventCallback+0x2e>
 8001076:	4b31      	ldr	r3, [pc, #196]	@ (800113c <HAL_UARTEx_RxEventCallback+0xec>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d13a      	bne.n	80010f4 <HAL_UARTEx_RxEventCallback+0xa4>
				start = 1;
 800107e:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <HAL_UARTEx_RxEventCallback+0xec>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
				// save in temp buffer - prevent RB from corrupted frames
				tempBuf[tempPos++] = rcvBuffer[i];
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	4b2e      	ldr	r3, [pc, #184]	@ (8001140 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	1c59      	adds	r1, r3, #1
 800108c:	b2c8      	uxtb	r0, r1
 800108e:	492c      	ldr	r1, [pc, #176]	@ (8001140 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001090:	7008      	strb	r0, [r1, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001096:	5c9a      	ldrb	r2, [r3, r2]
 8001098:	4b2a      	ldr	r3, [pc, #168]	@ (8001144 <HAL_UARTEx_RxEventCallback+0xf4>)
 800109a:	545a      	strb	r2, [r3, r1]
				if (rcvBuffer[i] == EOF_CHAR) {
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	4a26      	ldr	r2, [pc, #152]	@ (8001138 <HAL_UARTEx_RxEventCallback+0xe8>)
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	2bbf      	cmp	r3, #191	@ 0xbf
 80010a4:	d11c      	bne.n	80010e0 <HAL_UARTEx_RxEventCallback+0x90>
					for (uint8_t j = 0; j < tempPos; j++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]
 80010aa:	e009      	b.n	80010c0 <HAL_UARTEx_RxEventCallback+0x70>
						RB_write(&ringBufRx, tempBuf[j]);
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	4a25      	ldr	r2, [pc, #148]	@ (8001144 <HAL_UARTEx_RxEventCallback+0xf4>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	4619      	mov	r1, r3
 80010b4:	4824      	ldr	r0, [pc, #144]	@ (8001148 <HAL_UARTEx_RxEventCallback+0xf8>)
 80010b6:	f7ff fd92 	bl	8000bde <RB_write>
					for (uint8_t j = 0; j < tempPos; j++) {
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	3301      	adds	r3, #1
 80010be:	73bb      	strb	r3, [r7, #14]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <HAL_UARTEx_RxEventCallback+0xf0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	7bba      	ldrb	r2, [r7, #14]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3f0      	bcc.n	80010ac <HAL_UARTEx_RxEventCallback+0x5c>
					}
					// ready to parse
					frameEndCnt++;
 80010ca:	4b20      	ldr	r3, [pc, #128]	@ (800114c <HAL_UARTEx_RxEventCallback+0xfc>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <HAL_UARTEx_RxEventCallback+0xfc>)
 80010d6:	701a      	strb	r2, [r3, #0]
					tempPos = 0;
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <HAL_UARTEx_RxEventCallback+0xf0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e009      	b.n	80010f4 <HAL_UARTEx_RxEventCallback+0xa4>
				}
				else if (tempPos > MAX_FRAME_SIZE) {
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_UARTEx_RxEventCallback+0xf0>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2ba7      	cmp	r3, #167	@ 0xa7
 80010e6:	d905      	bls.n	80010f4 <HAL_UARTEx_RxEventCallback+0xa4>
					/* ERROR - frame is bigger than expected */
					start = 0;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <HAL_UARTEx_RxEventCallback+0xec>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
					tempPos = 0;
 80010ee:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <HAL_UARTEx_RxEventCallback+0xf0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < Size; i++) {
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	3301      	adds	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	887a      	ldrh	r2, [r7, #2]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8b3      	bhi.n	800106c <HAL_UARTEx_RxEventCallback+0x1c>
				}
			}
		}
	}

	HAL_UARTEx_ReceiveToIdle_DMA(huartHandler, rcvBuffer, MAX_RCV_SIZE);
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_UARTEx_RxEventCallback+0x100>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	22ff      	movs	r2, #255	@ 0xff
 800110a:	490b      	ldr	r1, [pc, #44]	@ (8001138 <HAL_UARTEx_RxEventCallback+0xe8>)
 800110c:	4618      	mov	r0, r3
 800110e:	f003 fcca 	bl	8004aa6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(huartHandler->hdmarx, DMA_IT_HT);
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_UARTEx_RxEventCallback+0x100>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <HAL_UARTEx_RxEventCallback+0x100>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0208 	bic.w	r2, r2, #8
 8001128:	601a      	str	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40011400 	.word	0x40011400
 8001138:	20000ae0 	.word	0x20000ae0
 800113c:	20000be8 	.word	0x20000be8
 8001140:	20000be9 	.word	0x20000be9
 8001144:	20000bec 	.word	0x20000bec
 8001148:	200006d8 	.word	0x200006d8
 800114c:	20000be0 	.word	0x20000be0
 8001150:	20000be4 	.word	0x20000be4

08001154 <HAL_UART_TxCpltCallback>:

// Sending done - CB
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a09      	ldr	r2, [pc, #36]	@ (8001188 <HAL_UART_TxCpltCallback+0x34>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d10b      	bne.n	800117e <HAL_UART_TxCpltCallback+0x2a>
		// If there is still sth in RB - continue sending.
		if (ringBufTx.head != ringBufTx.tail) {
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_UART_TxCpltCallback+0x38>)
 8001168:	881a      	ldrh	r2, [r3, #0]
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <HAL_UART_TxCpltCallback+0x38>)
 800116c:	885b      	ldrh	r3, [r3, #2]
 800116e:	429a      	cmp	r2, r3
 8001170:	d002      	beq.n	8001178 <HAL_UART_TxCpltCallback+0x24>
			uart_Send();
 8001172:	f000 f8d9 	bl	8001328 <uart_Send>
		else {
			// DMA free
			isDmaSend = 0;
		}
	}
}
 8001176:	e002      	b.n	800117e <HAL_UART_TxCpltCallback+0x2a>
			isDmaSend = 0;
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <HAL_UART_TxCpltCallback+0x3c>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40011400 	.word	0x40011400
 800118c:	200008dc 	.word	0x200008dc
 8001190:	20000bdf 	.word	0x20000bdf

08001194 <usart_dma_init>:


void usart_dma_init(UART_HandleTypeDef *huart) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	huartHandler = huart;
 800119c:	4a0c      	ldr	r2, [pc, #48]	@ (80011d0 <usart_dma_init+0x3c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]

	/* Disable callback from receiving half of the expected data*/
	HAL_UARTEx_ReceiveToIdle_DMA(huartHandler, rcvBuffer, MAX_RCV_SIZE);
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <usart_dma_init+0x3c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	22ff      	movs	r2, #255	@ 0xff
 80011a8:	490a      	ldr	r1, [pc, #40]	@ (80011d4 <usart_dma_init+0x40>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fc7b 	bl	8004aa6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(huartHandler->hdmarx, DMA_IT_HT);
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <usart_dma_init+0x3c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <usart_dma_init+0x3c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0208 	bic.w	r2, r2, #8
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000be4 	.word	0x20000be4
 80011d4:	20000ae0 	.word	0x20000ae0

080011d8 <usart_dma_SendFrame>:


HAL_StatusTypeDef usart_dma_SendFrame(uint8_t *pData, size_t size) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]

	for (int i = 0; i < size; i++) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e00a      	b.n	80011fe <usart_dma_SendFrame+0x26>
		RB_write(&ringBufTx, pData[i]);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	480b      	ldr	r0, [pc, #44]	@ (8001220 <usart_dma_SendFrame+0x48>)
 80011f4:	f7ff fcf3 	bl	8000bde <RB_write>
	for (int i = 0; i < size; i++) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d8f0      	bhi.n	80011e8 <usart_dma_SendFrame+0x10>
	}
	/* Chcek if previous DMA sending is completed - if no data will be enququed in RB */
	if (!isDmaSend) {
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <usart_dma_SendFrame+0x4c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <usart_dma_SendFrame+0x3c>
		uart_Send();
 8001210:	f000 f88a 	bl	8001328 <uart_Send>
	}
	return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200008dc 	.word	0x200008dc
 8001224:	20000bdf 	.word	0x20000bdf

08001228 <usart_dma_frameProcess>:

/* Parsing raw frame from rcv_RB, returning struct of included data in the frame. */
usartMessage_t usart_dma_frameProcess(){
 8001228:	b580      	push	{r7, lr}
 800122a:	b0d8      	sub	sp, #352	@ 0x160
 800122c:	af00      	add	r7, sp, #0
 800122e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001232:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001236:	6018      	str	r0, [r3, #0]
	uint8_t rawFrame[MAX_FRAME_SIZE];
	usartMessage_t msg;
	uint8_t i = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
	uint8_t isSof = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
	uint8_t val = 0;
 8001244:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001248:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
	memset(&msg, 0, sizeof(msg));
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	22a4      	movs	r2, #164	@ 0xa4
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f003 ffac 	bl	80051b6 <memset>
	if (frameEndCnt > 0) {
 800125e:	4b30      	ldr	r3, [pc, #192]	@ (8001320 <usart_dma_frameProcess+0xf8>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d043      	beq.n	80012f0 <usart_dma_frameProcess+0xc8>
			  // find SOF - start of the frame (ensure)
			  do {
				  RB_read(&ringBufRx, &val);
 8001268:	f107 030f 	add.w	r3, r7, #15
 800126c:	4619      	mov	r1, r3
 800126e:	482d      	ldr	r0, [pc, #180]	@ (8001324 <usart_dma_frameProcess+0xfc>)
 8001270:	f7ff fc8c 	bl	8000b8c <RB_read>
				  if (val == SOF_CHAR || isSof == 1) {
 8001274:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001278:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2bbe      	cmp	r3, #190	@ 0xbe
 8001280:	d003      	beq.n	800128a <usart_dma_frameProcess+0x62>
 8001282:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8001286:	2b01      	cmp	r3, #1
 8001288:	d113      	bne.n	80012b2 <usart_dma_frameProcess+0x8a>
					  isSof = 1;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
					  rawFrame[i] = val;
 8001290:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001294:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001298:	f2a2 1251 	subw	r2, r2, #337	@ 0x151
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80012a2:	443b      	add	r3, r7
 80012a4:	f803 2cac 	strb.w	r2, [r3, #-172]
					  i++;
 80012a8:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80012ac:	3301      	adds	r3, #1
 80012ae:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
				  }
			  } while(val != EOF_CHAR && i < MAX_FRAME_SIZE);
 80012b2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012b6:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2bbf      	cmp	r3, #191	@ 0xbf
 80012be:	d003      	beq.n	80012c8 <usart_dma_frameProcess+0xa0>
 80012c0:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80012c4:	2ba6      	cmp	r3, #166	@ 0xa6
 80012c6:	d9cf      	bls.n	8001268 <usart_dma_frameProcess+0x40>

			  // parse frame into data struct
			  frame_parser_analyze(rawFrame, i, &msg);
 80012c8:	f107 0210 	add.w	r2, r7, #16
 80012cc:	f897 115f 	ldrb.w	r1, [r7, #351]	@ 0x15f
 80012d0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f9bc 	bl	8000652 <frame_parser_analyze>
  __ASM volatile ("cpsid i" : : : "memory");
 80012da:	b672      	cpsid	i
}
 80012dc:	bf00      	nop

			  // parsing done.
			  __disable_irq();
			  frameEndCnt--;
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <usart_dma_frameProcess+0xf8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <usart_dma_frameProcess+0xf8>)
 80012ea:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012ec:	b662      	cpsie	i
}
 80012ee:	bf00      	nop
			  __enable_irq();
		  }
	return msg;
 80012f0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012f4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012fe:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	23a4      	movs	r3, #164	@ 0xa4
 8001308:	461a      	mov	r2, r3
 800130a:	f003 ff81 	bl	8005210 <memcpy>
}
 800130e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001312:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000be0 	.word	0x20000be0
 8001324:	200006d8 	.word	0x200006d8

08001328 <uart_Send>:


HAL_StatusTypeDef uart_Send() {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800132e:	b672      	cpsid	i
}
 8001330:	bf00      	nop
	// DMA -> busy
	__disable_irq();
	isDmaSend = 1;
 8001332:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <uart_Send+0x94>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001338:	b662      	cpsie	i
}
 800133a:	bf00      	nop
	__enable_irq();
	// ensure if there is sth in RB_tx
	if (ringBufTx.head != ringBufTx.tail) {
 800133c:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <uart_Send+0x98>)
 800133e:	881a      	ldrh	r2, [r3, #0]
 8001340:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <uart_Send+0x98>)
 8001342:	885b      	ldrh	r3, [r3, #2]
 8001344:	429a      	cmp	r2, r3
 8001346:	d02c      	beq.n	80013a2 <uart_Send+0x7a>
		uint16_t size = (ringBufTx.head > ringBufTx.tail) ? (ringBufTx.head - ringBufTx.tail): (RING_BUFFER_SIZE - ringBufTx.tail);
 8001348:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <uart_Send+0x98>)
 800134a:	881a      	ldrh	r2, [r3, #0]
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <uart_Send+0x98>)
 800134e:	885b      	ldrh	r3, [r3, #2]
 8001350:	429a      	cmp	r2, r3
 8001352:	d906      	bls.n	8001362 <uart_Send+0x3a>
 8001354:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <uart_Send+0x98>)
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <uart_Send+0x98>)
 800135a:	885b      	ldrh	r3, [r3, #2]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	b29b      	uxth	r3, r3
 8001360:	e004      	b.n	800136c <uart_Send+0x44>
 8001362:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <uart_Send+0x98>)
 8001364:	885b      	ldrh	r3, [r3, #2]
 8001366:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800136a:	b29b      	uxth	r3, r3
 800136c:	80bb      	strh	r3, [r7, #4]
		static uint8_t tempBuf[RING_BUFFER_SIZE];
		for (uint16_t i = 0; i < size; i++) {
 800136e:	2300      	movs	r3, #0
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	e009      	b.n	8001388 <uart_Send+0x60>
			RB_read(&ringBufTx, &tempBuf[i]);
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	4a13      	ldr	r2, [pc, #76]	@ (80013c4 <uart_Send+0x9c>)
 8001378:	4413      	add	r3, r2
 800137a:	4619      	mov	r1, r3
 800137c:	4810      	ldr	r0, [pc, #64]	@ (80013c0 <uart_Send+0x98>)
 800137e:	f7ff fc05 	bl	8000b8c <RB_read>
		for (uint16_t i = 0; i < size; i++) {
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	3301      	adds	r3, #1
 8001386:	80fb      	strh	r3, [r7, #6]
 8001388:	88fa      	ldrh	r2, [r7, #6]
 800138a:	88bb      	ldrh	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	d3f1      	bcc.n	8001374 <uart_Send+0x4c>
		}
		HAL_UART_Transmit_DMA(huartHandler, tempBuf, size);
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <uart_Send+0xa0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	88ba      	ldrh	r2, [r7, #4]
 8001396:	490b      	ldr	r1, [pc, #44]	@ (80013c4 <uart_Send+0x9c>)
 8001398:	4618      	mov	r0, r3
 800139a:	f002 f98f 	bl	80036bc <HAL_UART_Transmit_DMA>
		__disable_irq();
		isDmaSend = 0;
		__enable_irq();
		return HAL_ERROR;
	}
	return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e007      	b.n	80013b2 <uart_Send+0x8a>
  __ASM volatile ("cpsid i" : : : "memory");
 80013a2:	b672      	cpsid	i
}
 80013a4:	bf00      	nop
		isDmaSend = 0;
 80013a6:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <uart_Send+0x94>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013ac:	b662      	cpsie	i
}
 80013ae:	bf00      	nop
		return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000bdf 	.word	0x20000bdf
 80013c0:	200008dc 	.word	0x200008dc
 80013c4:	20000c94 	.word	0x20000c94
 80013c8:	20000be4 	.word	0x20000be4

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001404 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 80013d0:	f7ff fe2c 	bl	800102c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	@ (800140c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f003 fee5 	bl	80051c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff f983 	bl	8000708 <main>
  bx  lr    
 8001402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001410:	08005374 	.word	0x08005374
  ldr r2, =_sbss
 8001414:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001418:	20000e98 	.word	0x20000e98

0800141c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC_IRQHandler>

0800141e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001422:	2003      	movs	r0, #3
 8001424:	f000 f94c 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001428:	2000      	movs	r0, #0
 800142a:	f000 f805 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142e:	f7ff fbff 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <HAL_InitTick+0x54>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_InitTick+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f967 	bl	800172a <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d80a      	bhi.n	8001482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f92f 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4a06      	ldr	r2, [pc, #24]	@ (8001494 <HAL_InitTick+0x5c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	20000008 	.word	0x20000008
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000e94 	.word	0x20000e94

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000e94 	.word	0x20000e94

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff ffee 	bl	80014c0 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d005      	beq.n	80014fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_Delay+0x44>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fe:	bf00      	nop
 8001500:	f7ff ffde 	bl	80014c0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8f7      	bhi.n	8001500 <HAL_Delay+0x28>
  {
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <__NVIC_SetPriorityGrouping+0x40>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	4313      	orrs	r3, r2
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <__NVIC_SetPriorityGrouping+0x40>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00
 8001564:	05fa0000 	.word	0x05fa0000

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4907      	ldr	r1, [pc, #28]	@ (80015bc <__NVIC_EnableIRQ+0x38>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	@ (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	@ (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff29 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff3e 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff8e 	bl	8001614 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5d 	bl	80015c0 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff31 	bl	8001584 <__NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffa2 	bl	800167c <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff feb6 	bl	80014c0 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e099      	b.n	8001894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001780:	e00f      	b.n	80017a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001782:	f7ff fe9d 	bl	80014c0 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b05      	cmp	r3, #5
 800178e:	d908      	bls.n	80017a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2220      	movs	r2, #32
 8001794:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2203      	movs	r2, #3
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e078      	b.n	8001894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1e8      	bne.n	8001782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	4b38      	ldr	r3, [pc, #224]	@ (800189c <HAL_DMA_Init+0x158>)
 80017bc:	4013      	ands	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d107      	bne.n	800180c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001804:	4313      	orrs	r3, r2
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4313      	orrs	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f023 0307 	bic.w	r3, r3, #7
 8001822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4313      	orrs	r3, r2
 800182c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001832:	2b04      	cmp	r3, #4
 8001834:	d117      	bne.n	8001866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4313      	orrs	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00e      	beq.n	8001866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 fb09 	bl	8001e60 <DMA_CheckFifoParam>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2240      	movs	r2, #64	@ 0x40
 8001858:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001862:	2301      	movs	r3, #1
 8001864:	e016      	b.n	8001894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fac0 	bl	8001df4 <DMA_CalcBaseAndBitshift>
 8001874:	4603      	mov	r3, r0
 8001876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187c:	223f      	movs	r2, #63	@ 0x3f
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	e010803f 	.word	0xe010803f

080018a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_DMA_Start_IT+0x26>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e048      	b.n	8001958 <HAL_DMA_Start_IT+0xb8>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d137      	bne.n	800194a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2202      	movs	r2, #2
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fa52 	bl	8001d98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	223f      	movs	r2, #63	@ 0x3f
 80018fa:	409a      	lsls	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0216 	orr.w	r2, r2, #22
 800190e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800191e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0208 	orr.w	r2, r2, #8
 8001936:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e005      	b.n	8001956 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001952:	2302      	movs	r3, #2
 8001954:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001956:	7dfb      	ldrb	r3, [r7, #23]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800196e:	f7ff fda7 	bl	80014c0 <HAL_GetTick>
 8001972:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d008      	beq.n	8001992 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2280      	movs	r2, #128	@ 0x80
 8001984:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e052      	b.n	8001a38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0216 	bic.w	r2, r2, #22
 80019a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <HAL_DMA_Abort+0x62>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0208 	bic.w	r2, r2, #8
 80019d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e2:	e013      	b.n	8001a0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019e4:	f7ff fd6c 	bl	80014c0 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d90c      	bls.n	8001a0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2220      	movs	r2, #32
 80019f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2203      	movs	r2, #3
 80019fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e015      	b.n	8001a38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1e4      	bne.n	80019e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1e:	223f      	movs	r2, #63	@ 0x3f
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d004      	beq.n	8001a5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2280      	movs	r2, #128	@ 0x80
 8001a58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00c      	b.n	8001a78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2205      	movs	r2, #5
 8001a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a90:	4b8e      	ldr	r3, [pc, #568]	@ (8001ccc <HAL_DMA_IRQHandler+0x248>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a8e      	ldr	r2, [pc, #568]	@ (8001cd0 <HAL_DMA_IRQHandler+0x24c>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0a9b      	lsrs	r3, r3, #10
 8001a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aae:	2208      	movs	r2, #8
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01a      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001adc:	2208      	movs	r2, #8
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af4:	2201      	movs	r2, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d012      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b12:	2201      	movs	r2, #1
 8001b14:	409a      	lsls	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1e:	f043 0202 	orr.w	r2, r3, #2
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d012      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00b      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b48:	2204      	movs	r2, #4
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b54:	f043 0204 	orr.w	r2, r3, #4
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b60:	2210      	movs	r2, #16
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d043      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d03c      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7e:	2210      	movs	r2, #16
 8001b80:	409a      	lsls	r2, r3
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d108      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d024      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
 8001bb2:	e01f      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01b      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
 8001bc4:	e016      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0208 	bic.w	r2, r2, #8
 8001be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 808f 	beq.w	8001d24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8087 	beq.w	8001d24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b05      	cmp	r3, #5
 8001c2c:	d136      	bne.n	8001c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0216 	bic.w	r2, r2, #22
 8001c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d103      	bne.n	8001c5e <HAL_DMA_IRQHandler+0x1da>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0208 	bic.w	r2, r2, #8
 8001c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	223f      	movs	r2, #63	@ 0x3f
 8001c74:	409a      	lsls	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d07e      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
        }
        return;
 8001c9a:	e079      	b.n	8001d90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01d      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d031      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
 8001cc8:	e02c      	b.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d023      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e01e      	b.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10f      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0210 	bic.w	r2, r2, #16
 8001d02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d032      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d022      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2205      	movs	r2, #5
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	3301      	adds	r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d307      	bcc.n	8001d6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f2      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x2cc>
 8001d6a:	e000      	b.n	8001d6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
 8001d8e:	e000      	b.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d90:	bf00      	nop
    }
  }
}
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001db4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b40      	cmp	r3, #64	@ 0x40
 8001dc4:	d108      	bne.n	8001dd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dd6:	e007      	b.n	8001de8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	60da      	str	r2, [r3, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	3b10      	subs	r3, #16
 8001e04:	4a13      	ldr	r2, [pc, #76]	@ (8001e54 <DMA_CalcBaseAndBitshift+0x60>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e0e:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <DMA_CalcBaseAndBitshift+0x64>)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d908      	bls.n	8001e34 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <DMA_CalcBaseAndBitshift+0x68>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	1d1a      	adds	r2, r3, #4
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e32:	e006      	b.n	8001e42 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <DMA_CalcBaseAndBitshift+0x68>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	aaaaaaab 	.word	0xaaaaaaab
 8001e58:	0800535c 	.word	0x0800535c
 8001e5c:	fffffc00 	.word	0xfffffc00

08001e60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d11f      	bne.n	8001eba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d856      	bhi.n	8001f2e <DMA_CheckFifoParam+0xce>
 8001e80:	a201      	add	r2, pc, #4	@ (adr r2, 8001e88 <DMA_CheckFifoParam+0x28>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001eab 	.word	0x08001eab
 8001e90:	08001e99 	.word	0x08001e99
 8001e94:	08001f2f 	.word	0x08001f2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d046      	beq.n	8001f32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea8:	e043      	b.n	8001f32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001eb2:	d140      	bne.n	8001f36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb8:	e03d      	b.n	8001f36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ec2:	d121      	bne.n	8001f08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d837      	bhi.n	8001f3a <DMA_CheckFifoParam+0xda>
 8001eca:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed0 <DMA_CheckFifoParam+0x70>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001ee1 	.word	0x08001ee1
 8001ed4:	08001ee7 	.word	0x08001ee7
 8001ed8:	08001ee1 	.word	0x08001ee1
 8001edc:	08001ef9 	.word	0x08001ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee4:	e030      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d025      	beq.n	8001f3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef6:	e022      	b.n	8001f3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f00:	d11f      	bne.n	8001f42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f06:	e01c      	b.n	8001f42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d903      	bls.n	8001f16 <DMA_CheckFifoParam+0xb6>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d003      	beq.n	8001f1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f14:	e018      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
      break;
 8001f1a:	e015      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00e      	beq.n	8001f46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f2c:	e00b      	b.n	8001f46 <DMA_CheckFifoParam+0xe6>
      break;
 8001f2e:	bf00      	nop
 8001f30:	e00a      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;
 8001f32:	bf00      	nop
 8001f34:	e008      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;
 8001f36:	bf00      	nop
 8001f38:	e006      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;
 8001f3a:	bf00      	nop
 8001f3c:	e004      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;
 8001f3e:	bf00      	nop
 8001f40:	e002      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f42:	bf00      	nop
 8001f44:	e000      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;
 8001f46:	bf00      	nop
    }
  } 
  
  return status; 
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e169      	b.n	800224c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f040 8158 	bne.w	8002246 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d005      	beq.n	8001fae <HAL_GPIO_Init+0x56>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d130      	bne.n	8002010 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	2203      	movs	r2, #3
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 0201 	and.w	r2, r3, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	2b03      	cmp	r3, #3
 800201a:	d017      	beq.n	800204c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d123      	bne.n	80020a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	08da      	lsrs	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3208      	adds	r2, #8
 8002060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	220f      	movs	r2, #15
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3208      	adds	r2, #8
 800209a:	69b9      	ldr	r1, [r7, #24]
 800209c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0203 	and.w	r2, r3, #3
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80b2 	beq.w	8002246 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	4b60      	ldr	r3, [pc, #384]	@ (8002264 <HAL_GPIO_Init+0x30c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	4a5f      	ldr	r2, [pc, #380]	@ (8002264 <HAL_GPIO_Init+0x30c>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002264 <HAL_GPIO_Init+0x30c>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80020fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002268 <HAL_GPIO_Init+0x310>)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	3302      	adds	r3, #2
 8002102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a52      	ldr	r2, [pc, #328]	@ (800226c <HAL_GPIO_Init+0x314>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d02b      	beq.n	800217e <HAL_GPIO_Init+0x226>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a51      	ldr	r2, [pc, #324]	@ (8002270 <HAL_GPIO_Init+0x318>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d025      	beq.n	800217a <HAL_GPIO_Init+0x222>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a50      	ldr	r2, [pc, #320]	@ (8002274 <HAL_GPIO_Init+0x31c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01f      	beq.n	8002176 <HAL_GPIO_Init+0x21e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4f      	ldr	r2, [pc, #316]	@ (8002278 <HAL_GPIO_Init+0x320>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d019      	beq.n	8002172 <HAL_GPIO_Init+0x21a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4e      	ldr	r2, [pc, #312]	@ (800227c <HAL_GPIO_Init+0x324>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0x216>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4d      	ldr	r2, [pc, #308]	@ (8002280 <HAL_GPIO_Init+0x328>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00d      	beq.n	800216a <HAL_GPIO_Init+0x212>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4c      	ldr	r2, [pc, #304]	@ (8002284 <HAL_GPIO_Init+0x32c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <HAL_GPIO_Init+0x20e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4b      	ldr	r2, [pc, #300]	@ (8002288 <HAL_GPIO_Init+0x330>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_GPIO_Init+0x20a>
 800215e:	2307      	movs	r3, #7
 8002160:	e00e      	b.n	8002180 <HAL_GPIO_Init+0x228>
 8002162:	2308      	movs	r3, #8
 8002164:	e00c      	b.n	8002180 <HAL_GPIO_Init+0x228>
 8002166:	2306      	movs	r3, #6
 8002168:	e00a      	b.n	8002180 <HAL_GPIO_Init+0x228>
 800216a:	2305      	movs	r3, #5
 800216c:	e008      	b.n	8002180 <HAL_GPIO_Init+0x228>
 800216e:	2304      	movs	r3, #4
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x228>
 8002172:	2303      	movs	r3, #3
 8002174:	e004      	b.n	8002180 <HAL_GPIO_Init+0x228>
 8002176:	2302      	movs	r3, #2
 8002178:	e002      	b.n	8002180 <HAL_GPIO_Init+0x228>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_GPIO_Init+0x228>
 800217e:	2300      	movs	r3, #0
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	f002 0203 	and.w	r2, r2, #3
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	4093      	lsls	r3, r2
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002190:	4935      	ldr	r1, [pc, #212]	@ (8002268 <HAL_GPIO_Init+0x310>)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3302      	adds	r3, #2
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219e:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <HAL_GPIO_Init+0x334>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c2:	4a32      	ldr	r2, [pc, #200]	@ (800228c <HAL_GPIO_Init+0x334>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c8:	4b30      	ldr	r3, [pc, #192]	@ (800228c <HAL_GPIO_Init+0x334>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ec:	4a27      	ldr	r2, [pc, #156]	@ (800228c <HAL_GPIO_Init+0x334>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021f2:	4b26      	ldr	r3, [pc, #152]	@ (800228c <HAL_GPIO_Init+0x334>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002216:	4a1d      	ldr	r2, [pc, #116]	@ (800228c <HAL_GPIO_Init+0x334>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800221c:	4b1b      	ldr	r3, [pc, #108]	@ (800228c <HAL_GPIO_Init+0x334>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002240:	4a12      	ldr	r2, [pc, #72]	@ (800228c <HAL_GPIO_Init+0x334>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b0f      	cmp	r3, #15
 8002250:	f67f ae92 	bls.w	8001f78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3724      	adds	r7, #36	@ 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40013800 	.word	0x40013800
 800226c:	40020000 	.word	0x40020000
 8002270:	40020400 	.word	0x40020400
 8002274:	40020800 	.word	0x40020800
 8002278:	40020c00 	.word	0x40020c00
 800227c:	40021000 	.word	0x40021000
 8002280:	40021400 	.word	0x40021400
 8002284:	40021800 	.word	0x40021800
 8002288:	40021c00 	.word	0x40021c00
 800228c:	40013c00 	.word	0x40013c00

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022ac:	e003      	b.n	80022b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	041a      	lsls	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	619a      	str	r2, [r3, #24]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af02      	add	r7, sp, #8
 80022c8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e108      	b.n	80024e6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fdd4 	bl	8000e9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002302:	d102      	bne.n	800230a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f002 fcaa 	bl	8004c68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7c1a      	ldrb	r2, [r3, #16]
 800231c:	f88d 2000 	strb.w	r2, [sp]
 8002320:	3304      	adds	r3, #4
 8002322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002324:	f002 fc14 	bl	8004b50 <USB_CoreInit>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0d5      	b.n	80024e6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f002 fca2 	bl	8004c8a <USB_SetCurrentMode>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0c6      	b.n	80024e6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e04a      	b.n	80023f4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3315      	adds	r3, #21
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	3314      	adds	r3, #20
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	b298      	uxth	r0, r3
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	332e      	adds	r3, #46	@ 0x2e
 800239a:	4602      	mov	r2, r0
 800239c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	3318      	adds	r3, #24
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	331c      	adds	r3, #28
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	3320      	adds	r3, #32
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	3324      	adds	r3, #36	@ 0x24
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	3301      	adds	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	791b      	ldrb	r3, [r3, #4]
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d3af      	bcc.n	800235e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	e044      	b.n	800248e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	3301      	adds	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	429a      	cmp	r2, r3
 8002496:	d3b5      	bcc.n	8002404 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7c1a      	ldrb	r2, [r3, #16]
 80024a0:	f88d 2000 	strb.w	r2, [sp]
 80024a4:	3304      	adds	r3, #4
 80024a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a8:	f002 fc3c 	bl	8004d24 <USB_DevInit>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e013      	b.n	80024e6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7b1b      	ldrb	r3, [r3, #12]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d102      	bne.n	80024da <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f80b 	bl	80024f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f002 fe09 	bl	80050f6 <USB_DevDisconnect>

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <HAL_PCDEx_ActivateLPM+0x44>)
 8002520:	4313      	orrs	r3, r2
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	10000003 	.word	0x10000003

08002538 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40007000 	.word	0x40007000

08002558 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b23      	ldr	r3, [pc, #140]	@ (80025f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	4a22      	ldr	r2, [pc, #136]	@ (80025f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	@ 0x40
 800256e:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800257a:	4b1e      	ldr	r3, [pc, #120]	@ (80025f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1d      	ldr	r2, [pc, #116]	@ (80025f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002584:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002586:	f7fe ff9b 	bl	80014c0 <HAL_GetTick>
 800258a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800258c:	e009      	b.n	80025a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800258e:	f7fe ff97 	bl	80014c0 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800259c:	d901      	bls.n	80025a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e022      	b.n	80025e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025a2:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ae:	d1ee      	bne.n	800258e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025b0:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0f      	ldr	r2, [pc, #60]	@ (80025f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025bc:	f7fe ff80 	bl	80014c0 <HAL_GetTick>
 80025c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025c2:	e009      	b.n	80025d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025c4:	f7fe ff7c 	bl	80014c0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025d2:	d901      	bls.n	80025d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e007      	b.n	80025e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025e4:	d1ee      	bne.n	80025c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40007000 	.word	0x40007000

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e291      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8087 	beq.w	800272a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800261c:	4b96      	ldr	r3, [pc, #600]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b04      	cmp	r3, #4
 8002626:	d00c      	beq.n	8002642 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002628:	4b93      	ldr	r3, [pc, #588]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b08      	cmp	r3, #8
 8002632:	d112      	bne.n	800265a <HAL_RCC_OscConfig+0x62>
 8002634:	4b90      	ldr	r3, [pc, #576]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002640:	d10b      	bne.n	800265a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002642:	4b8d      	ldr	r3, [pc, #564]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d06c      	beq.n	8002728 <HAL_RCC_OscConfig+0x130>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d168      	bne.n	8002728 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e26b      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x7a>
 8002664:	4b84      	ldr	r3, [pc, #528]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a83      	ldr	r2, [pc, #524]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 800266a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	e02e      	b.n	80026d0 <HAL_RCC_OscConfig+0xd8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x9c>
 800267a:	4b7f      	ldr	r3, [pc, #508]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a7e      	ldr	r2, [pc, #504]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b7c      	ldr	r3, [pc, #496]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a7b      	ldr	r2, [pc, #492]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 800268c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e01d      	b.n	80026d0 <HAL_RCC_OscConfig+0xd8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0xc0>
 800269e:	4b76      	ldr	r3, [pc, #472]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a75      	ldr	r2, [pc, #468]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b73      	ldr	r3, [pc, #460]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a72      	ldr	r2, [pc, #456]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0xd8>
 80026b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80026be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a6b      	ldr	r2, [pc, #428]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80026ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fef2 	bl	80014c0 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7fe feee 	bl	80014c0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	@ 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e21f      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b61      	ldr	r3, [pc, #388]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0xe8>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fede 	bl	80014c0 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe feda 	bl	80014c0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	@ 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e20b      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	4b57      	ldr	r3, [pc, #348]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x110>
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d069      	beq.n	800280a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002736:	4b50      	ldr	r3, [pc, #320]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002742:	4b4d      	ldr	r3, [pc, #308]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b08      	cmp	r3, #8
 800274c:	d11c      	bne.n	8002788 <HAL_RCC_OscConfig+0x190>
 800274e:	4b4a      	ldr	r3, [pc, #296]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	4b47      	ldr	r3, [pc, #284]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_RCC_OscConfig+0x17a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1df      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002772:	4b41      	ldr	r3, [pc, #260]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	493d      	ldr	r1, [pc, #244]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	e040      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d023      	beq.n	80027d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002790:	4b39      	ldr	r3, [pc, #228]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a38      	ldr	r2, [pc, #224]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe fe90 	bl	80014c0 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a4:	f7fe fe8c 	bl	80014c0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e1bd      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b6:	4b30      	ldr	r3, [pc, #192]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4929      	ldr	r1, [pc, #164]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
 80027d6:	e018      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d8:	4b27      	ldr	r3, [pc, #156]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a26      	ldr	r2, [pc, #152]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fe6c 	bl	80014c0 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ec:	f7fe fe68 	bl	80014c0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e199      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d038      	beq.n	8002888 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d019      	beq.n	8002852 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281e:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002822:	4a15      	ldr	r2, [pc, #84]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7fe fe49 	bl	80014c0 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002832:	f7fe fe45 	bl	80014c0 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e176      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002844:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x23a>
 8002850:	e01a      	b.n	8002888 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002856:	4a08      	ldr	r2, [pc, #32]	@ (8002878 <HAL_RCC_OscConfig+0x280>)
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285e:	f7fe fe2f 	bl	80014c0 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002866:	f7fe fe2b 	bl	80014c0 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d903      	bls.n	800287c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e15c      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
 8002878:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	4b91      	ldr	r3, [pc, #580]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 800287e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ee      	bne.n	8002866 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a4 	beq.w	80029de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002896:	4b8b      	ldr	r3, [pc, #556]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	4b88      	ldr	r3, [pc, #544]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a87      	ldr	r2, [pc, #540]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b85      	ldr	r3, [pc, #532]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ba:	2301      	movs	r3, #1
 80028bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028be:	4b82      	ldr	r3, [pc, #520]	@ (8002ac8 <HAL_RCC_OscConfig+0x4d0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d118      	bne.n	80028fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80028ca:	4b7f      	ldr	r3, [pc, #508]	@ (8002ac8 <HAL_RCC_OscConfig+0x4d0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a7e      	ldr	r2, [pc, #504]	@ (8002ac8 <HAL_RCC_OscConfig+0x4d0>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d6:	f7fe fdf3 	bl	80014c0 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028de:	f7fe fdef 	bl	80014c0 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b64      	cmp	r3, #100	@ 0x64
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e120      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f0:	4b75      	ldr	r3, [pc, #468]	@ (8002ac8 <HAL_RCC_OscConfig+0x4d0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x31a>
 8002904:	4b6f      	ldr	r3, [pc, #444]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002908:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002910:	e02d      	b.n	800296e <HAL_RCC_OscConfig+0x376>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x33c>
 800291a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	4a69      	ldr	r2, [pc, #420]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	6713      	str	r3, [r2, #112]	@ 0x70
 8002926:	4b67      	ldr	r3, [pc, #412]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	4a66      	ldr	r2, [pc, #408]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 800292c:	f023 0304 	bic.w	r3, r3, #4
 8002930:	6713      	str	r3, [r2, #112]	@ 0x70
 8002932:	e01c      	b.n	800296e <HAL_RCC_OscConfig+0x376>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b05      	cmp	r3, #5
 800293a:	d10c      	bne.n	8002956 <HAL_RCC_OscConfig+0x35e>
 800293c:	4b61      	ldr	r3, [pc, #388]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a60      	ldr	r2, [pc, #384]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002942:	f043 0304 	orr.w	r3, r3, #4
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
 8002948:	4b5e      	ldr	r3, [pc, #376]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
 8002954:	e00b      	b.n	800296e <HAL_RCC_OscConfig+0x376>
 8002956:	4b5b      	ldr	r3, [pc, #364]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	6713      	str	r3, [r2, #112]	@ 0x70
 8002962:	4b58      	ldr	r3, [pc, #352]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	4a57      	ldr	r2, [pc, #348]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002968:	f023 0304 	bic.w	r3, r3, #4
 800296c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d015      	beq.n	80029a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe fda3 	bl	80014c0 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe fd9f 	bl	80014c0 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e0ce      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ee      	beq.n	800297e <HAL_RCC_OscConfig+0x386>
 80029a0:	e014      	b.n	80029cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fe fd8d 	bl	80014c0 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fd89 	bl	80014c0 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c0:	4b40      	ldr	r3, [pc, #256]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1ee      	bne.n	80029aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d105      	bne.n	80029de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 80029d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80a4 	beq.w	8002b30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e8:	4b36      	ldr	r3, [pc, #216]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d06b      	beq.n	8002acc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d149      	bne.n	8002a90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fc:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a30      	ldr	r2, [pc, #192]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fd5a 	bl	80014c0 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe fd56 	bl	80014c0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e087      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	4b28      	ldr	r3, [pc, #160]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	019b      	lsls	r3, r3, #6
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	3b01      	subs	r3, #1
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	061b      	lsls	r3, r3, #24
 8002a52:	4313      	orrs	r3, r2
 8002a54:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002a56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a18      	ldr	r2, [pc, #96]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7fe fd2a 	bl	80014c0 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fe fd26 	bl	80014c0 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e057      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b10      	ldr	r3, [pc, #64]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x478>
 8002a8e:	e04f      	b.n	8002b30 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fd10 	bl	80014c0 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe fd0c 	bl	80014c0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e03d      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	4b03      	ldr	r3, [pc, #12]	@ (8002ac4 <HAL_RCC_OscConfig+0x4cc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4ac>
 8002ac2:	e035      	b.n	8002b30 <HAL_RCC_OscConfig+0x538>
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002acc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <HAL_RCC_OscConfig+0x544>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d028      	beq.n	8002b2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d121      	bne.n	8002b2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d11a      	bne.n	8002b2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d111      	bne.n	8002b2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	3b01      	subs	r3, #1
 8002b16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800

08002b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0d0      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b58:	4b6a      	ldr	r3, [pc, #424]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d910      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b67      	ldr	r3, [pc, #412]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 020f 	bic.w	r2, r3, #15
 8002b6e:	4965      	ldr	r1, [pc, #404]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b63      	ldr	r3, [pc, #396]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0b8      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba0:	4b59      	ldr	r3, [pc, #356]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a58      	ldr	r2, [pc, #352]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002baa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb8:	4b53      	ldr	r3, [pc, #332]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b50      	ldr	r3, [pc, #320]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	494d      	ldr	r1, [pc, #308]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d040      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b47      	ldr	r3, [pc, #284]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d115      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c02:	4b41      	ldr	r3, [pc, #260]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e073      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c12:	4b3d      	ldr	r3, [pc, #244]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e06b      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c22:	4b39      	ldr	r3, [pc, #228]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 0203 	bic.w	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4936      	ldr	r1, [pc, #216]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe fc44 	bl	80014c0 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3c:	f7fe fc40 	bl	80014c0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e053      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	4b2d      	ldr	r3, [pc, #180]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 020c 	and.w	r2, r3, #12
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d1eb      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c64:	4b27      	ldr	r3, [pc, #156]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d210      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b24      	ldr	r3, [pc, #144]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 020f 	bic.w	r2, r3, #15
 8002c7a:	4922      	ldr	r1, [pc, #136]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e032      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca0:	4b19      	ldr	r3, [pc, #100]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4916      	ldr	r1, [pc, #88]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cbe:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	490e      	ldr	r1, [pc, #56]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cd2:	f000 f821 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	490a      	ldr	r1, [pc, #40]	@ (8002d0c <HAL_RCC_ClockConfig+0x1cc>)
 8002ce4:	5ccb      	ldrb	r3, [r1, r3]
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	4a09      	ldr	r2, [pc, #36]	@ (8002d10 <HAL_RCC_ClockConfig+0x1d0>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cee:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_RCC_ClockConfig+0x1d4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fba0 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08005344 	.word	0x08005344
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000004 	.word	0x20000004

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d1c:	b094      	sub	sp, #80	@ 0x50
 8002d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d24:	2300      	movs	r3, #0
 8002d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d28:	2300      	movs	r3, #0
 8002d2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d30:	4b79      	ldr	r3, [pc, #484]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d00d      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x40>
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	f200 80e1 	bhi.w	8002f04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x34>
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4a:	e0db      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b73      	ldr	r3, [pc, #460]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d50:	e0db      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d52:	4b73      	ldr	r3, [pc, #460]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d56:	e0d8      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d58:	4b6f      	ldr	r3, [pc, #444]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d62:	4b6d      	ldr	r3, [pc, #436]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d063      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	2200      	movs	r2, #0
 8002d76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d82:	2300      	movs	r3, #0
 8002d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	f04f 0000 	mov.w	r0, #0
 8002d92:	f04f 0100 	mov.w	r1, #0
 8002d96:	0159      	lsls	r1, r3, #5
 8002d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9c:	0150      	lsls	r0, r2, #5
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4621      	mov	r1, r4
 8002da4:	1a51      	subs	r1, r2, r1
 8002da6:	6139      	str	r1, [r7, #16]
 8002da8:	4629      	mov	r1, r5
 8002daa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	018b      	lsls	r3, r1, #6
 8002dc0:	4651      	mov	r1, sl
 8002dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc6:	4651      	mov	r1, sl
 8002dc8:	018a      	lsls	r2, r1, #6
 8002dca:	4651      	mov	r1, sl
 8002dcc:	ebb2 0801 	subs.w	r8, r2, r1
 8002dd0:	4659      	mov	r1, fp
 8002dd2:	eb63 0901 	sbc.w	r9, r3, r1
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dea:	4690      	mov	r8, r2
 8002dec:	4699      	mov	r9, r3
 8002dee:	4623      	mov	r3, r4
 8002df0:	eb18 0303 	adds.w	r3, r8, r3
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	462b      	mov	r3, r5
 8002df8:	eb49 0303 	adc.w	r3, r9, r3
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	024b      	lsls	r3, r1, #9
 8002e0e:	4621      	mov	r1, r4
 8002e10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e14:	4621      	mov	r1, r4
 8002e16:	024a      	lsls	r2, r1, #9
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e1e:	2200      	movs	r2, #0
 8002e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e28:	f7fd f9fa 	bl	8000220 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4613      	mov	r3, r2
 8002e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e34:	e058      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e36:	4b38      	ldr	r3, [pc, #224]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	099b      	lsrs	r3, r3, #6
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	4611      	mov	r1, r2
 8002e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	f04f 0000 	mov.w	r0, #0
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	0159      	lsls	r1, r3, #5
 8002e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e62:	0150      	lsls	r0, r2, #5
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4641      	mov	r1, r8
 8002e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e6e:	4649      	mov	r1, r9
 8002e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e88:	ebb2 040a 	subs.w	r4, r2, sl
 8002e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	00eb      	lsls	r3, r5, #3
 8002e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e9e:	00e2      	lsls	r2, r4, #3
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	461d      	mov	r5, r3
 8002ea4:	4643      	mov	r3, r8
 8002ea6:	18e3      	adds	r3, r4, r3
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	464b      	mov	r3, r9
 8002eac:	eb45 0303 	adc.w	r3, r5, r3
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	028b      	lsls	r3, r1, #10
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec8:	4621      	mov	r1, r4
 8002eca:	028a      	lsls	r2, r1, #10
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	61fa      	str	r2, [r7, #28]
 8002ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002edc:	f7fd f9a0 	bl	8000220 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ef8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3750      	adds	r7, #80	@ 0x50
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	007a1200 	.word	0x007a1200

08002f24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b03      	ldr	r3, [pc, #12]	@ (8002f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000000 	.word	0x20000000

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f40:	f7ff fff0 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4903      	ldr	r1, [pc, #12]	@ (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	08005354 	.word	0x08005354

08002f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f68:	f7ff ffdc 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0b5b      	lsrs	r3, r3, #13
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	@ (8002f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	08005354 	.word	0x08005354

08002f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d012      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fb0:	4b65      	ldr	r3, [pc, #404]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a64      	ldr	r2, [pc, #400]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fb6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002fba:	6093      	str	r3, [r2, #8]
 8002fbc:	4b62      	ldr	r3, [pc, #392]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc4:	4960      	ldr	r1, [pc, #384]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d017      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fe2:	4b59      	ldr	r3, [pc, #356]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fe8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff0:	4955      	ldr	r1, [pc, #340]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003000:	d101      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003002:	2301      	movs	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800300e:	2301      	movs	r3, #1
 8003010:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d017      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800301e:	4b4a      	ldr	r3, [pc, #296]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003024:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302c:	4946      	ldr	r1, [pc, #280]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800303c:	d101      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800303e:	2301      	movs	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800304a:	2301      	movs	r3, #1
 800304c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 808b 	beq.w	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	4b3a      	ldr	r3, [pc, #232]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003060:	4a39      	ldr	r2, [pc, #228]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003066:	6413      	str	r3, [r2, #64]	@ 0x40
 8003068:	4b37      	ldr	r3, [pc, #220]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003074:	4b35      	ldr	r3, [pc, #212]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a34      	ldr	r2, [pc, #208]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800307e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003080:	f7fe fa1e 	bl	80014c0 <HAL_GetTick>
 8003084:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7fe fa1a 	bl	80014c0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	@ 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e2bc      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800309a:	4b2c      	ldr	r3, [pc, #176]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030a6:	4b28      	ldr	r3, [pc, #160]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d035      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d02e      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030c4:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030da:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030de:	4a1a      	ldr	r2, [pc, #104]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80030e6:	4a18      	ldr	r2, [pc, #96]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030ec:	4b16      	ldr	r3, [pc, #88]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d114      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe f9e2 	bl	80014c0 <HAL_GetTick>
 80030fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fe:	e00a      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f7fe f9de 	bl	80014c0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e27e      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003116:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0ee      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800312a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800312e:	d111      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800313c:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800313e:	400b      	ands	r3, r1
 8003140:	4901      	ldr	r1, [pc, #4]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
 8003146:	e00b      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003148:	40023800 	.word	0x40023800
 800314c:	40007000 	.word	0x40007000
 8003150:	0ffffcff 	.word	0x0ffffcff
 8003154:	4ba4      	ldr	r3, [pc, #656]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4aa3      	ldr	r2, [pc, #652]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800315a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800315e:	6093      	str	r3, [r2, #8]
 8003160:	4ba1      	ldr	r3, [pc, #644]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003162:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316c:	499e      	ldr	r1, [pc, #632]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800316e:	4313      	orrs	r3, r2
 8003170:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b00      	cmp	r3, #0
 800317c:	d010      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800317e:	4b9a      	ldr	r3, [pc, #616]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003184:	4a98      	ldr	r2, [pc, #608]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800318a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800318e:	4b96      	ldr	r3, [pc, #600]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003190:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003198:	4993      	ldr	r1, [pc, #588]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ac:	4b8e      	ldr	r3, [pc, #568]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ba:	498b      	ldr	r1, [pc, #556]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031ce:	4b86      	ldr	r3, [pc, #536]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031dc:	4982      	ldr	r1, [pc, #520]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031f0:	4b7d      	ldr	r3, [pc, #500]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031fe:	497a      	ldr	r1, [pc, #488]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003212:	4b75      	ldr	r3, [pc, #468]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003218:	f023 0203 	bic.w	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003220:	4971      	ldr	r1, [pc, #452]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003234:	4b6c      	ldr	r3, [pc, #432]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323a:	f023 020c 	bic.w	r2, r3, #12
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	4969      	ldr	r1, [pc, #420]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003256:	4b64      	ldr	r3, [pc, #400]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003264:	4960      	ldr	r1, [pc, #384]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003278:	4b5b      	ldr	r3, [pc, #364]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003286:	4958      	ldr	r1, [pc, #352]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800329a:	4b53      	ldr	r3, [pc, #332]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a8:	494f      	ldr	r1, [pc, #316]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80032bc:	4b4a      	ldr	r3, [pc, #296]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ca:	4947      	ldr	r1, [pc, #284]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032de:	4b42      	ldr	r3, [pc, #264]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	493e      	ldr	r1, [pc, #248]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003300:	4b39      	ldr	r3, [pc, #228]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003306:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330e:	4936      	ldr	r1, [pc, #216]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d011      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003322:	4b31      	ldr	r3, [pc, #196]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003328:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003330:	492d      	ldr	r1, [pc, #180]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800333c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003340:	d101      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003352:	4b25      	ldr	r3, [pc, #148]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003360:	4921      	ldr	r1, [pc, #132]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003374:	4b1c      	ldr	r3, [pc, #112]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003382:	4919      	ldr	r1, [pc, #100]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003396:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033a4:	4910      	ldr	r1, [pc, #64]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d006      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 809d 	beq.w	80034fa <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033c0:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a08      	ldr	r2, [pc, #32]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fe f878 	bl	80014c0 <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033d2:	e00b      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033d4:	f7fe f874 	bl	80014c0 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	@ 0x64
 80033e0:	d904      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e116      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033ec:	4b8b      	ldr	r3, [pc, #556]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ed      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d017      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d113      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800340c:	4b83      	ldr	r3, [pc, #524]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800340e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003412:	0e1b      	lsrs	r3, r3, #24
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	019a      	lsls	r2, r3, #6
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	061b      	lsls	r3, r3, #24
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	071b      	lsls	r3, r3, #28
 800342c:	497b      	ldr	r1, [pc, #492]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003444:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003452:	2b00      	cmp	r3, #0
 8003454:	d024      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800345e:	d11f      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003460:	4b6e      	ldr	r3, [pc, #440]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003466:	0f1b      	lsrs	r3, r3, #28
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	019a      	lsls	r2, r3, #6
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	061b      	lsls	r3, r3, #24
 800347a:	431a      	orrs	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	071b      	lsls	r3, r3, #28
 8003480:	4966      	ldr	r1, [pc, #408]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003488:	4b64      	ldr	r3, [pc, #400]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800348a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800348e:	f023 021f 	bic.w	r2, r3, #31
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	3b01      	subs	r3, #1
 8003498:	4960      	ldr	r1, [pc, #384]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	019a      	lsls	r2, r3, #6
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	061b      	lsls	r3, r3, #24
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	071b      	lsls	r3, r3, #28
 80034c0:	4956      	ldr	r1, [pc, #344]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034c8:	4b54      	ldr	r3, [pc, #336]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a53      	ldr	r2, [pc, #332]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80034ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d4:	f7fd fff4 	bl	80014c0 <HAL_GetTick>
 80034d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034dc:	f7fd fff0 	bl	80014c0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e092      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034ee:	4b4b      	ldr	r3, [pc, #300]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	f040 8088 	bne.w	8003612 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003502:	4b46      	ldr	r3, [pc, #280]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a45      	ldr	r2, [pc, #276]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800350c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350e:	f7fd ffd7 	bl	80014c0 <HAL_GetTick>
 8003512:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003516:	f7fd ffd3 	bl	80014c0 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b64      	cmp	r3, #100	@ 0x64
 8003522:	d901      	bls.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e075      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003528:	4b3c      	ldr	r3, [pc, #240]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003534:	d0ef      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003552:	2b00      	cmp	r3, #0
 8003554:	d024      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355a:	2b00      	cmp	r3, #0
 800355c:	d120      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800355e:	4b2f      	ldr	r3, [pc, #188]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003564:	0c1b      	lsrs	r3, r3, #16
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	019a      	lsls	r2, r3, #6
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	061b      	lsls	r3, r3, #24
 800357e:	4927      	ldr	r1, [pc, #156]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003586:	4b25      	ldr	r3, [pc, #148]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800358c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	3b01      	subs	r3, #1
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	4920      	ldr	r1, [pc, #128]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d018      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x652>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035b4:	d113      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035b6:	4b19      	ldr	r3, [pc, #100]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035bc:	0e1b      	lsrs	r3, r3, #24
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	019a      	lsls	r2, r3, #6
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	431a      	orrs	r2, r3
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	4911      	ldr	r1, [pc, #68]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035de:	4b0f      	ldr	r3, [pc, #60]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a0e      	ldr	r2, [pc, #56]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ea:	f7fd ff69 	bl	80014c0 <HAL_GetTick>
 80035ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035f2:	f7fd ff65 	bl	80014c0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b64      	cmp	r3, #100	@ 0x64
 80035fe:	d901      	bls.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e007      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003604:	4b05      	ldr	r3, [pc, #20]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800360c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003610:	d1ef      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40023800 	.word	0x40023800

08003620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e040      	b.n	80036b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fb18 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	@ 0x24
 800364c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fe02 	bl	8004270 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fb9b 	bl	8003da8 <UART_SetConfig>
 8003672:	4603      	mov	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e01b      	b.n	80036b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800368a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800369a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fe81 	bl	80043b4 <UART_CheckIdleState>
 80036b2:	4603      	mov	r3, r0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	@ 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d165      	bne.n	800379e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_UART_Transmit_DMA+0x22>
 80036d8:	88fb      	ldrh	r3, [r7, #6]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e05e      	b.n	80037a0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2221      	movs	r2, #33	@ 0x21
 8003704:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370a:	2b00      	cmp	r3, #0
 800370c:	d027      	beq.n	800375e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	4a25      	ldr	r2, [pc, #148]	@ (80037a8 <HAL_UART_Transmit_DMA+0xec>)
 8003714:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371a:	4a24      	ldr	r2, [pc, #144]	@ (80037ac <HAL_UART_Transmit_DMA+0xf0>)
 800371c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003722:	4a23      	ldr	r2, [pc, #140]	@ (80037b0 <HAL_UART_Transmit_DMA+0xf4>)
 8003724:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372a:	2200      	movs	r2, #0
 800372c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003736:	4619      	mov	r1, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3328      	adds	r3, #40	@ 0x28
 800373e:	461a      	mov	r2, r3
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	f7fe f8ad 	bl	80018a0 <HAL_DMA_Start_IT>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2210      	movs	r2, #16
 8003750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e020      	b.n	80037a0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2240      	movs	r2, #64	@ 0x40
 8003764:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3308      	adds	r3, #8
 800376c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	613b      	str	r3, [r7, #16]
   return(result);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800377c:	627b      	str	r3, [r7, #36]	@ 0x24
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3308      	adds	r3, #8
 8003784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003786:	623a      	str	r2, [r7, #32]
 8003788:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	69f9      	ldr	r1, [r7, #28]
 800378c:	6a3a      	ldr	r2, [r7, #32]
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	61bb      	str	r3, [r7, #24]
   return(result);
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e5      	bne.n	8003766 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3728      	adds	r7, #40	@ 0x28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	08004791 	.word	0x08004791
 80037ac:	08004827 	.word	0x08004827
 80037b0:	080049a9 	.word	0x080049a9

080037b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b0ba      	sub	sp, #232	@ 0xe8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80037de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80037e2:	4013      	ands	r3, r2
 80037e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80037e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d115      	bne.n	800381c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00f      	beq.n	800381c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d009      	beq.n	800381c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8297 	beq.w	8003d40 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
      }
      return;
 800381a:	e291      	b.n	8003d40 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800381c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8117 	beq.w	8003a54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003832:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003836:	4b85      	ldr	r3, [pc, #532]	@ (8003a4c <HAL_UART_IRQHandler+0x298>)
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 810a 	beq.w	8003a54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d011      	beq.n	8003870 <HAL_UART_IRQHandler+0xbc>
 800384c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00b      	beq.n	8003870 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2201      	movs	r2, #1
 800385e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d011      	beq.n	80038a0 <HAL_UART_IRQHandler+0xec>
 800387c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2202      	movs	r2, #2
 800388e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003896:	f043 0204 	orr.w	r2, r3, #4
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d011      	beq.n	80038d0 <HAL_UART_IRQHandler+0x11c>
 80038ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00b      	beq.n	80038d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2204      	movs	r2, #4
 80038be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c6:	f043 0202 	orr.w	r2, r3, #2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d017      	beq.n	800390c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2208      	movs	r2, #8
 80038fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003902:	f043 0208 	orr.w	r2, r3, #8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800390c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003914:	2b00      	cmp	r3, #0
 8003916:	d012      	beq.n	800393e <HAL_UART_IRQHandler+0x18a>
 8003918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800391c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800392c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 81fd 	beq.w	8003d44 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800394a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00d      	beq.n	8003972 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003978:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003986:	2b40      	cmp	r3, #64	@ 0x40
 8003988:	d005      	beq.n	8003996 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800398a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800398e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04f      	beq.n	8003a36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fe96 	bl	80046c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b40      	cmp	r3, #64	@ 0x40
 80039a8:	d141      	bne.n	8003a2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3308      	adds	r3, #8
 80039b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1d9      	bne.n	80039aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d013      	beq.n	8003a26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a02:	4a13      	ldr	r2, [pc, #76]	@ (8003a50 <HAL_UART_IRQHandler+0x29c>)
 8003a04:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe f818 	bl	8001a40 <HAL_DMA_Abort_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d017      	beq.n	8003a46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a20:	4610      	mov	r0, r2
 8003a22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	e00f      	b.n	8003a46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f9b4 	bl	8003d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	e00b      	b.n	8003a46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9b0 	bl	8003d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	e007      	b.n	8003a46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9ac 	bl	8003d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003a44:	e17e      	b.n	8003d44 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a46:	bf00      	nop
    return;
 8003a48:	e17c      	b.n	8003d44 <HAL_UART_IRQHandler+0x590>
 8003a4a:	bf00      	nop
 8003a4c:	04000120 	.word	0x04000120
 8003a50:	08004a27 	.word	0x08004a27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	f040 814c 	bne.w	8003cf6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8145 	beq.w	8003cf6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 813e 	beq.w	8003cf6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2210      	movs	r2, #16
 8003a80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8c:	2b40      	cmp	r3, #64	@ 0x40
 8003a8e:	f040 80b6 	bne.w	8003bfe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 8150 	beq.w	8003d48 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	f080 8148 	bcs.w	8003d48 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003abe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003acc:	f000 8086 	beq.w	8003bdc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003afa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003afe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1da      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3308      	adds	r3, #8
 8003b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e1      	bne.n	8003b1a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3308      	adds	r3, #8
 8003b76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e3      	bne.n	8003b56 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bac:	f023 0310 	bic.w	r3, r3, #16
 8003bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e4      	bne.n	8003b9c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd fec2 	bl	8001960 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fd fa2a 	bl	8001050 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bfc:	e0a4      	b.n	8003d48 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8096 	beq.w	8003d4c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003c20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8091 	beq.w	8003d4c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e4      	bne.n	8003c2a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3308      	adds	r3, #8
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c84:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e3      	bne.n	8003c60 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f023 0310 	bic.w	r3, r3, #16
 8003cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	69b9      	ldr	r1, [r7, #24]
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	617b      	str	r3, [r7, #20]
   return(result);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e4      	bne.n	8003cac <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cec:	4619      	mov	r1, r3
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd f9ae 	bl	8001050 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cf4:	e02a      	b.n	8003d4c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00e      	beq.n	8003d20 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01c      	beq.n	8003d50 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
    }
    return;
 8003d1e:	e017      	b.n	8003d50 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d012      	beq.n	8003d52 <HAL_UART_IRQHandler+0x59e>
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00c      	beq.n	8003d52 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fe8a 	bl	8004a52 <UART_EndTransmit_IT>
    return;
 8003d3e:	e008      	b.n	8003d52 <HAL_UART_IRQHandler+0x59e>
      return;
 8003d40:	bf00      	nop
 8003d42:	e006      	b.n	8003d52 <HAL_UART_IRQHandler+0x59e>
    return;
 8003d44:	bf00      	nop
 8003d46:	e004      	b.n	8003d52 <HAL_UART_IRQHandler+0x59e>
      return;
 8003d48:	bf00      	nop
 8003d4a:	e002      	b.n	8003d52 <HAL_UART_IRQHandler+0x59e>
      return;
 8003d4c:	bf00      	nop
 8003d4e:	e000      	b.n	8003d52 <HAL_UART_IRQHandler+0x59e>
    return;
 8003d50:	bf00      	nop
  }

}
 8003d52:	37e8      	adds	r7, #232	@ 0xe8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4ba6      	ldr	r3, [pc, #664]	@ (800406c <UART_SetConfig+0x2c4>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	6979      	ldr	r1, [r7, #20]
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a94      	ldr	r2, [pc, #592]	@ (8004070 <UART_SetConfig+0x2c8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d120      	bne.n	8003e66 <UART_SetConfig+0xbe>
 8003e24:	4b93      	ldr	r3, [pc, #588]	@ (8004074 <UART_SetConfig+0x2cc>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d816      	bhi.n	8003e60 <UART_SetConfig+0xb8>
 8003e32:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <UART_SetConfig+0x90>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e49 	.word	0x08003e49
 8003e3c:	08003e55 	.word	0x08003e55
 8003e40:	08003e4f 	.word	0x08003e4f
 8003e44:	08003e5b 	.word	0x08003e5b
 8003e48:	2301      	movs	r3, #1
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e150      	b.n	80040f0 <UART_SetConfig+0x348>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e14d      	b.n	80040f0 <UART_SetConfig+0x348>
 8003e54:	2304      	movs	r3, #4
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e14a      	b.n	80040f0 <UART_SetConfig+0x348>
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e147      	b.n	80040f0 <UART_SetConfig+0x348>
 8003e60:	2310      	movs	r3, #16
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e144      	b.n	80040f0 <UART_SetConfig+0x348>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a83      	ldr	r2, [pc, #524]	@ (8004078 <UART_SetConfig+0x2d0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d132      	bne.n	8003ed6 <UART_SetConfig+0x12e>
 8003e70:	4b80      	ldr	r3, [pc, #512]	@ (8004074 <UART_SetConfig+0x2cc>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b0c      	cmp	r3, #12
 8003e7c:	d828      	bhi.n	8003ed0 <UART_SetConfig+0x128>
 8003e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e84 <UART_SetConfig+0xdc>)
 8003e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e84:	08003eb9 	.word	0x08003eb9
 8003e88:	08003ed1 	.word	0x08003ed1
 8003e8c:	08003ed1 	.word	0x08003ed1
 8003e90:	08003ed1 	.word	0x08003ed1
 8003e94:	08003ec5 	.word	0x08003ec5
 8003e98:	08003ed1 	.word	0x08003ed1
 8003e9c:	08003ed1 	.word	0x08003ed1
 8003ea0:	08003ed1 	.word	0x08003ed1
 8003ea4:	08003ebf 	.word	0x08003ebf
 8003ea8:	08003ed1 	.word	0x08003ed1
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ed1 	.word	0x08003ed1
 8003eb4:	08003ecb 	.word	0x08003ecb
 8003eb8:	2300      	movs	r3, #0
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e118      	b.n	80040f0 <UART_SetConfig+0x348>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	77fb      	strb	r3, [r7, #31]
 8003ec2:	e115      	b.n	80040f0 <UART_SetConfig+0x348>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e112      	b.n	80040f0 <UART_SetConfig+0x348>
 8003eca:	2308      	movs	r3, #8
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e10f      	b.n	80040f0 <UART_SetConfig+0x348>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e10c      	b.n	80040f0 <UART_SetConfig+0x348>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a68      	ldr	r2, [pc, #416]	@ (800407c <UART_SetConfig+0x2d4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d120      	bne.n	8003f22 <UART_SetConfig+0x17a>
 8003ee0:	4b64      	ldr	r3, [pc, #400]	@ (8004074 <UART_SetConfig+0x2cc>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003eea:	2b30      	cmp	r3, #48	@ 0x30
 8003eec:	d013      	beq.n	8003f16 <UART_SetConfig+0x16e>
 8003eee:	2b30      	cmp	r3, #48	@ 0x30
 8003ef0:	d814      	bhi.n	8003f1c <UART_SetConfig+0x174>
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d009      	beq.n	8003f0a <UART_SetConfig+0x162>
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d810      	bhi.n	8003f1c <UART_SetConfig+0x174>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <UART_SetConfig+0x15c>
 8003efe:	2b10      	cmp	r3, #16
 8003f00:	d006      	beq.n	8003f10 <UART_SetConfig+0x168>
 8003f02:	e00b      	b.n	8003f1c <UART_SetConfig+0x174>
 8003f04:	2300      	movs	r3, #0
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e0f2      	b.n	80040f0 <UART_SetConfig+0x348>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e0ef      	b.n	80040f0 <UART_SetConfig+0x348>
 8003f10:	2304      	movs	r3, #4
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e0ec      	b.n	80040f0 <UART_SetConfig+0x348>
 8003f16:	2308      	movs	r3, #8
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e0e9      	b.n	80040f0 <UART_SetConfig+0x348>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e0e6      	b.n	80040f0 <UART_SetConfig+0x348>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a56      	ldr	r2, [pc, #344]	@ (8004080 <UART_SetConfig+0x2d8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d120      	bne.n	8003f6e <UART_SetConfig+0x1c6>
 8003f2c:	4b51      	ldr	r3, [pc, #324]	@ (8004074 <UART_SetConfig+0x2cc>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f38:	d013      	beq.n	8003f62 <UART_SetConfig+0x1ba>
 8003f3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f3c:	d814      	bhi.n	8003f68 <UART_SetConfig+0x1c0>
 8003f3e:	2b80      	cmp	r3, #128	@ 0x80
 8003f40:	d009      	beq.n	8003f56 <UART_SetConfig+0x1ae>
 8003f42:	2b80      	cmp	r3, #128	@ 0x80
 8003f44:	d810      	bhi.n	8003f68 <UART_SetConfig+0x1c0>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <UART_SetConfig+0x1a8>
 8003f4a:	2b40      	cmp	r3, #64	@ 0x40
 8003f4c:	d006      	beq.n	8003f5c <UART_SetConfig+0x1b4>
 8003f4e:	e00b      	b.n	8003f68 <UART_SetConfig+0x1c0>
 8003f50:	2300      	movs	r3, #0
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e0cc      	b.n	80040f0 <UART_SetConfig+0x348>
 8003f56:	2302      	movs	r3, #2
 8003f58:	77fb      	strb	r3, [r7, #31]
 8003f5a:	e0c9      	b.n	80040f0 <UART_SetConfig+0x348>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e0c6      	b.n	80040f0 <UART_SetConfig+0x348>
 8003f62:	2308      	movs	r3, #8
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e0c3      	b.n	80040f0 <UART_SetConfig+0x348>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e0c0      	b.n	80040f0 <UART_SetConfig+0x348>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a44      	ldr	r2, [pc, #272]	@ (8004084 <UART_SetConfig+0x2dc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d125      	bne.n	8003fc4 <UART_SetConfig+0x21c>
 8003f78:	4b3e      	ldr	r3, [pc, #248]	@ (8004074 <UART_SetConfig+0x2cc>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f86:	d017      	beq.n	8003fb8 <UART_SetConfig+0x210>
 8003f88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f8c:	d817      	bhi.n	8003fbe <UART_SetConfig+0x216>
 8003f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f92:	d00b      	beq.n	8003fac <UART_SetConfig+0x204>
 8003f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f98:	d811      	bhi.n	8003fbe <UART_SetConfig+0x216>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <UART_SetConfig+0x1fe>
 8003f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa2:	d006      	beq.n	8003fb2 <UART_SetConfig+0x20a>
 8003fa4:	e00b      	b.n	8003fbe <UART_SetConfig+0x216>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	77fb      	strb	r3, [r7, #31]
 8003faa:	e0a1      	b.n	80040f0 <UART_SetConfig+0x348>
 8003fac:	2302      	movs	r3, #2
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e09e      	b.n	80040f0 <UART_SetConfig+0x348>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e09b      	b.n	80040f0 <UART_SetConfig+0x348>
 8003fb8:	2308      	movs	r3, #8
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e098      	b.n	80040f0 <UART_SetConfig+0x348>
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e095      	b.n	80040f0 <UART_SetConfig+0x348>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8004088 <UART_SetConfig+0x2e0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d125      	bne.n	800401a <UART_SetConfig+0x272>
 8003fce:	4b29      	ldr	r3, [pc, #164]	@ (8004074 <UART_SetConfig+0x2cc>)
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fdc:	d017      	beq.n	800400e <UART_SetConfig+0x266>
 8003fde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe2:	d817      	bhi.n	8004014 <UART_SetConfig+0x26c>
 8003fe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe8:	d00b      	beq.n	8004002 <UART_SetConfig+0x25a>
 8003fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fee:	d811      	bhi.n	8004014 <UART_SetConfig+0x26c>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <UART_SetConfig+0x254>
 8003ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff8:	d006      	beq.n	8004008 <UART_SetConfig+0x260>
 8003ffa:	e00b      	b.n	8004014 <UART_SetConfig+0x26c>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e076      	b.n	80040f0 <UART_SetConfig+0x348>
 8004002:	2302      	movs	r3, #2
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e073      	b.n	80040f0 <UART_SetConfig+0x348>
 8004008:	2304      	movs	r3, #4
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e070      	b.n	80040f0 <UART_SetConfig+0x348>
 800400e:	2308      	movs	r3, #8
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e06d      	b.n	80040f0 <UART_SetConfig+0x348>
 8004014:	2310      	movs	r3, #16
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e06a      	b.n	80040f0 <UART_SetConfig+0x348>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1b      	ldr	r2, [pc, #108]	@ (800408c <UART_SetConfig+0x2e4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d138      	bne.n	8004096 <UART_SetConfig+0x2ee>
 8004024:	4b13      	ldr	r3, [pc, #76]	@ (8004074 <UART_SetConfig+0x2cc>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800402e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004032:	d017      	beq.n	8004064 <UART_SetConfig+0x2bc>
 8004034:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004038:	d82a      	bhi.n	8004090 <UART_SetConfig+0x2e8>
 800403a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800403e:	d00b      	beq.n	8004058 <UART_SetConfig+0x2b0>
 8004040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004044:	d824      	bhi.n	8004090 <UART_SetConfig+0x2e8>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <UART_SetConfig+0x2aa>
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404e:	d006      	beq.n	800405e <UART_SetConfig+0x2b6>
 8004050:	e01e      	b.n	8004090 <UART_SetConfig+0x2e8>
 8004052:	2300      	movs	r3, #0
 8004054:	77fb      	strb	r3, [r7, #31]
 8004056:	e04b      	b.n	80040f0 <UART_SetConfig+0x348>
 8004058:	2302      	movs	r3, #2
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	e048      	b.n	80040f0 <UART_SetConfig+0x348>
 800405e:	2304      	movs	r3, #4
 8004060:	77fb      	strb	r3, [r7, #31]
 8004062:	e045      	b.n	80040f0 <UART_SetConfig+0x348>
 8004064:	2308      	movs	r3, #8
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e042      	b.n	80040f0 <UART_SetConfig+0x348>
 800406a:	bf00      	nop
 800406c:	efff69f3 	.word	0xefff69f3
 8004070:	40011000 	.word	0x40011000
 8004074:	40023800 	.word	0x40023800
 8004078:	40004400 	.word	0x40004400
 800407c:	40004800 	.word	0x40004800
 8004080:	40004c00 	.word	0x40004c00
 8004084:	40005000 	.word	0x40005000
 8004088:	40011400 	.word	0x40011400
 800408c:	40007800 	.word	0x40007800
 8004090:	2310      	movs	r3, #16
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e02c      	b.n	80040f0 <UART_SetConfig+0x348>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a72      	ldr	r2, [pc, #456]	@ (8004264 <UART_SetConfig+0x4bc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d125      	bne.n	80040ec <UART_SetConfig+0x344>
 80040a0:	4b71      	ldr	r3, [pc, #452]	@ (8004268 <UART_SetConfig+0x4c0>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80040aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040ae:	d017      	beq.n	80040e0 <UART_SetConfig+0x338>
 80040b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040b4:	d817      	bhi.n	80040e6 <UART_SetConfig+0x33e>
 80040b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ba:	d00b      	beq.n	80040d4 <UART_SetConfig+0x32c>
 80040bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c0:	d811      	bhi.n	80040e6 <UART_SetConfig+0x33e>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <UART_SetConfig+0x326>
 80040c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ca:	d006      	beq.n	80040da <UART_SetConfig+0x332>
 80040cc:	e00b      	b.n	80040e6 <UART_SetConfig+0x33e>
 80040ce:	2300      	movs	r3, #0
 80040d0:	77fb      	strb	r3, [r7, #31]
 80040d2:	e00d      	b.n	80040f0 <UART_SetConfig+0x348>
 80040d4:	2302      	movs	r3, #2
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e00a      	b.n	80040f0 <UART_SetConfig+0x348>
 80040da:	2304      	movs	r3, #4
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e007      	b.n	80040f0 <UART_SetConfig+0x348>
 80040e0:	2308      	movs	r3, #8
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e004      	b.n	80040f0 <UART_SetConfig+0x348>
 80040e6:	2310      	movs	r3, #16
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e001      	b.n	80040f0 <UART_SetConfig+0x348>
 80040ec:	2310      	movs	r3, #16
 80040ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f8:	d15b      	bne.n	80041b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80040fa:	7ffb      	ldrb	r3, [r7, #31]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d828      	bhi.n	8004152 <UART_SetConfig+0x3aa>
 8004100:	a201      	add	r2, pc, #4	@ (adr r2, 8004108 <UART_SetConfig+0x360>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	0800412d 	.word	0x0800412d
 800410c:	08004135 	.word	0x08004135
 8004110:	0800413d 	.word	0x0800413d
 8004114:	08004153 	.word	0x08004153
 8004118:	08004143 	.word	0x08004143
 800411c:	08004153 	.word	0x08004153
 8004120:	08004153 	.word	0x08004153
 8004124:	08004153 	.word	0x08004153
 8004128:	0800414b 	.word	0x0800414b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800412c:	f7fe ff06 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 8004130:	61b8      	str	r0, [r7, #24]
        break;
 8004132:	e013      	b.n	800415c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004134:	f7fe ff16 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 8004138:	61b8      	str	r0, [r7, #24]
        break;
 800413a:	e00f      	b.n	800415c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800413c:	4b4b      	ldr	r3, [pc, #300]	@ (800426c <UART_SetConfig+0x4c4>)
 800413e:	61bb      	str	r3, [r7, #24]
        break;
 8004140:	e00c      	b.n	800415c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004142:	f7fe fde9 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8004146:	61b8      	str	r0, [r7, #24]
        break;
 8004148:	e008      	b.n	800415c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800414e:	61bb      	str	r3, [r7, #24]
        break;
 8004150:	e004      	b.n	800415c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	77bb      	strb	r3, [r7, #30]
        break;
 800415a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d074      	beq.n	800424c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	005a      	lsls	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	441a      	add	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	fbb2 f3f3 	udiv	r3, r2, r3
 8004176:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b0f      	cmp	r3, #15
 800417c:	d916      	bls.n	80041ac <UART_SetConfig+0x404>
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004184:	d212      	bcs.n	80041ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f023 030f 	bic.w	r3, r3, #15
 800418e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	b29b      	uxth	r3, r3
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	b29a      	uxth	r2, r3
 800419c:	89fb      	ldrh	r3, [r7, #14]
 800419e:	4313      	orrs	r3, r2
 80041a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	89fa      	ldrh	r2, [r7, #14]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	e04f      	b.n	800424c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	77bb      	strb	r3, [r7, #30]
 80041b0:	e04c      	b.n	800424c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041b2:	7ffb      	ldrb	r3, [r7, #31]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d828      	bhi.n	800420a <UART_SetConfig+0x462>
 80041b8:	a201      	add	r2, pc, #4	@ (adr r2, 80041c0 <UART_SetConfig+0x418>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041e5 	.word	0x080041e5
 80041c4:	080041ed 	.word	0x080041ed
 80041c8:	080041f5 	.word	0x080041f5
 80041cc:	0800420b 	.word	0x0800420b
 80041d0:	080041fb 	.word	0x080041fb
 80041d4:	0800420b 	.word	0x0800420b
 80041d8:	0800420b 	.word	0x0800420b
 80041dc:	0800420b 	.word	0x0800420b
 80041e0:	08004203 	.word	0x08004203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e4:	f7fe feaa 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 80041e8:	61b8      	str	r0, [r7, #24]
        break;
 80041ea:	e013      	b.n	8004214 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041ec:	f7fe feba 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 80041f0:	61b8      	str	r0, [r7, #24]
        break;
 80041f2:	e00f      	b.n	8004214 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f4:	4b1d      	ldr	r3, [pc, #116]	@ (800426c <UART_SetConfig+0x4c4>)
 80041f6:	61bb      	str	r3, [r7, #24]
        break;
 80041f8:	e00c      	b.n	8004214 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fa:	f7fe fd8d 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 80041fe:	61b8      	str	r0, [r7, #24]
        break;
 8004200:	e008      	b.n	8004214 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004206:	61bb      	str	r3, [r7, #24]
        break;
 8004208:	e004      	b.n	8004214 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	77bb      	strb	r3, [r7, #30]
        break;
 8004212:	bf00      	nop
    }

    if (pclk != 0U)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d018      	beq.n	800424c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	085a      	lsrs	r2, r3, #1
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	441a      	add	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b0f      	cmp	r3, #15
 8004232:	d909      	bls.n	8004248 <UART_SetConfig+0x4a0>
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423a:	d205      	bcs.n	8004248 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	e001      	b.n	800424c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004258:	7fbb      	ldrb	r3, [r7, #30]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40007c00 	.word	0x40007c00
 8004268:	40023800 	.word	0x40023800
 800426c:	00f42400 	.word	0x00f42400

08004270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01a      	beq.n	8004386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800436e:	d10a      	bne.n	8004386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	@ 0x30
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043c4:	f7fd f87c 	bl	80014c0 <HAL_GetTick>
 80043c8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d12e      	bne.n	8004436 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	2200      	movs	r2, #0
 80043e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f83b 	bl	8004462 <UART_WaitOnFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d021      	beq.n	8004436 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004406:	623b      	str	r3, [r7, #32]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	69b9      	ldr	r1, [r7, #24]
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	617b      	str	r3, [r7, #20]
   return(result);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e6      	bne.n	80043f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e011      	b.n	800445a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3728      	adds	r7, #40	@ 0x28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	4613      	mov	r3, r2
 8004470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004472:	e04f      	b.n	8004514 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d04b      	beq.n	8004514 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447c:	f7fd f820 	bl	80014c0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	429a      	cmp	r2, r3
 800448a:	d302      	bcc.n	8004492 <UART_WaitOnFlagUntilTimeout+0x30>
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e04e      	b.n	8004534 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d037      	beq.n	8004514 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b80      	cmp	r3, #128	@ 0x80
 80044a8:	d034      	beq.n	8004514 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d031      	beq.n	8004514 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d110      	bne.n	80044e0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2208      	movs	r2, #8
 80044c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f8fe 	bl	80046c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2208      	movs	r2, #8
 80044d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e029      	b.n	8004534 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ee:	d111      	bne.n	8004514 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f8e4 	bl	80046c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e00f      	b.n	8004534 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	4013      	ands	r3, r2
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	429a      	cmp	r2, r3
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	429a      	cmp	r2, r3
 8004530:	d0a0      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b096      	sub	sp, #88	@ 0x58
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2222      	movs	r2, #34	@ 0x22
 8004564:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456c:	2b00      	cmp	r3, #0
 800456e:	d028      	beq.n	80045c2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004574:	4a3e      	ldr	r2, [pc, #248]	@ (8004670 <UART_Start_Receive_DMA+0x134>)
 8004576:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457c:	4a3d      	ldr	r2, [pc, #244]	@ (8004674 <UART_Start_Receive_DMA+0x138>)
 800457e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004584:	4a3c      	ldr	r2, [pc, #240]	@ (8004678 <UART_Start_Receive_DMA+0x13c>)
 8004586:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800458c:	2200      	movs	r2, #0
 800458e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3324      	adds	r3, #36	@ 0x24
 800459a:	4619      	mov	r1, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a0:	461a      	mov	r2, r3
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	f7fd f97c 	bl	80018a0 <HAL_DMA_Start_IT>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2210      	movs	r2, #16
 80045b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e051      	b.n	8004666 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d018      	beq.n	80045fc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045de:	657b      	str	r3, [r7, #84]	@ 0x54
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80045f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e6      	bne.n	80045ca <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3308      	adds	r3, #8
 8004602:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	653b      	str	r3, [r7, #80]	@ 0x50
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3308      	adds	r3, #8
 800461a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800461c:	637a      	str	r2, [r7, #52]	@ 0x34
 800461e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800462a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3308      	adds	r3, #8
 8004636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	613b      	str	r3, [r7, #16]
   return(result);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004650:	623a      	str	r2, [r7, #32]
 8004652:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	69f9      	ldr	r1, [r7, #28]
 8004656:	6a3a      	ldr	r2, [r7, #32]
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	61bb      	str	r3, [r7, #24]
   return(result);
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e5      	bne.n	8004630 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3758      	adds	r7, #88	@ 0x58
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	08004843 	.word	0x08004843
 8004674:	0800496b 	.word	0x0800496b
 8004678:	080049a9 	.word	0x080049a9

0800467c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	@ 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	60bb      	str	r3, [r7, #8]
   return(result);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6979      	ldr	r1, [r7, #20]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	613b      	str	r3, [r7, #16]
   return(result);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e6      	bne.n	8004684 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80046bc:	bf00      	nop
 80046be:	3724      	adds	r7, #36	@ 0x24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b095      	sub	sp, #84	@ 0x54
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80046f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e6      	bne.n	80046d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3308      	adds	r3, #8
 8004708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	61fb      	str	r3, [r7, #28]
   return(result);
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3308      	adds	r3, #8
 8004720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004724:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e5      	bne.n	8004702 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473a:	2b01      	cmp	r3, #1
 800473c:	d118      	bne.n	8004770 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	60bb      	str	r3, [r7, #8]
   return(result);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f023 0310 	bic.w	r3, r3, #16
 8004752:	647b      	str	r3, [r7, #68]	@ 0x44
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6979      	ldr	r1, [r7, #20]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	613b      	str	r3, [r7, #16]
   return(result);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e6      	bne.n	800473e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004784:	bf00      	nop
 8004786:	3754      	adds	r7, #84	@ 0x54
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b090      	sub	sp, #64	@ 0x40
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047a6:	d037      	beq.n	8004818 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80047a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3308      	adds	r3, #8
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	623b      	str	r3, [r7, #32]
   return(result);
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80047d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	69b9      	ldr	r1, [r7, #24]
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	617b      	str	r3, [r7, #20]
   return(result);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e6      	bne.n	80047e4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004816:	e002      	b.n	800481e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8004818:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800481a:	f7fc fc9b 	bl	8001154 <HAL_UART_TxCpltCallback>
}
 800481e:	bf00      	nop
 8004820:	3740      	adds	r7, #64	@ 0x40
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004832:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f7ff fa8f 	bl	8003d58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b09c      	sub	sp, #112	@ 0x70
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004858:	d071      	beq.n	800493e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800485a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800485c:	2200      	movs	r2, #0
 800485e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004872:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004876:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004880:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004882:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004886:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800488e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e6      	bne.n	8004862 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3308      	adds	r3, #8
 800489a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80048ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80048b4:	647a      	str	r2, [r7, #68]	@ 0x44
 80048b6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e5      	bne.n	8004894 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3308      	adds	r3, #8
 80048ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	623b      	str	r3, [r7, #32]
   return(result);
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048de:	663b      	str	r3, [r7, #96]	@ 0x60
 80048e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3308      	adds	r3, #8
 80048e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80048e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80048ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e5      	bne.n	80048c8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048fe:	2220      	movs	r2, #32
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004908:	2b01      	cmp	r3, #1
 800490a:	d118      	bne.n	800493e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	60fb      	str	r3, [r7, #12]
   return(result);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f023 0310 	bic.w	r3, r3, #16
 8004920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	69b9      	ldr	r1, [r7, #24]
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	617b      	str	r3, [r7, #20]
   return(result);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e6      	bne.n	800490c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800493e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004940:	2200      	movs	r2, #0
 8004942:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004948:	2b01      	cmp	r3, #1
 800494a:	d107      	bne.n	800495c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800494c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800494e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004952:	4619      	mov	r1, r3
 8004954:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004956:	f7fc fb7b 	bl	8001050 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800495a:	e002      	b.n	8004962 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800495c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800495e:	f7ff fa05 	bl	8003d6c <HAL_UART_RxCpltCallback>
}
 8004962:	bf00      	nop
 8004964:	3770      	adds	r7, #112	@ 0x70
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004976:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004982:	2b01      	cmp	r3, #1
 8004984:	d109      	bne.n	800499a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	b29b      	uxth	r3, r3
 8004990:	4619      	mov	r1, r3
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f7fc fb5c 	bl	8001050 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004998:	e002      	b.n	80049a0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7ff f9f0 	bl	8003d80 <HAL_UART_RxHalfCpltCallback>
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ce:	2b80      	cmp	r3, #128	@ 0x80
 80049d0:	d109      	bne.n	80049e6 <UART_DMAError+0x3e>
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b21      	cmp	r3, #33	@ 0x21
 80049d6:	d106      	bne.n	80049e6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80049e0:	6978      	ldr	r0, [r7, #20]
 80049e2:	f7ff fe4b 	bl	800467c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b40      	cmp	r3, #64	@ 0x40
 80049f2:	d109      	bne.n	8004a08 <UART_DMAError+0x60>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b22      	cmp	r3, #34	@ 0x22
 80049f8:	d106      	bne.n	8004a08 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	f7ff fe60 	bl	80046c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a0e:	f043 0210 	orr.w	r2, r3, #16
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a18:	6978      	ldr	r0, [r7, #20]
 8004a1a:	f7ff f9bb 	bl	8003d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff f9a5 	bl	8003d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b088      	sub	sp, #32
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	6979      	ldr	r1, [r7, #20]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	613b      	str	r3, [r7, #16]
   return(result);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e6      	bne.n	8004a5a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7fc fb5b 	bl	8001154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a9e:	bf00      	nop
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b08c      	sub	sp, #48	@ 0x30
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d142      	bne.n	8004b44 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e03b      	b.n	8004b46 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	461a      	mov	r2, r3
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff fd2b 	bl	800453c <UART_Start_Receive_DMA>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004aec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d124      	bne.n	8004b3e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d11d      	bne.n	8004b38 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2210      	movs	r2, #16
 8004b02:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	617b      	str	r3, [r7, #20]
   return(result);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f043 0310 	orr.w	r3, r3, #16
 8004b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b24:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	6a39      	ldr	r1, [r7, #32]
 8004b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e6      	bne.n	8004b04 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004b36:	e002      	b.n	8004b3e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b42:	e000      	b.n	8004b46 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
  }
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3730      	adds	r7, #48	@ 0x30
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b50:	b084      	sub	sp, #16
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	f107 001c 	add.w	r0, r7, #28
 8004b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d127      	bne.n	8004bba <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c64 <USB_CoreInit+0x114>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f043 0210 	orr.w	r2, r3, #16
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d105      	bne.n	8004bae <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fad0 	bl	8005154 <USB_CoreReset>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	e03c      	b.n	8004c34 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004bba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d127      	bne.n	8004c12 <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	4b24      	ldr	r3, [pc, #144]	@ (8004c64 <USB_CoreInit+0x114>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f023 0210 	bic.w	r2, r3, #16
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8004bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d105      	bne.n	8004c06 <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 faa4 	bl	8005154 <USB_CoreReset>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	e010      	b.n	8004c34 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa98 	bl	8005154 <USB_CoreReset>
 8004c24:	4603      	mov	r3, r0
 8004c26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004c34:	7fbb      	ldrb	r3, [r7, #30]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d10b      	bne.n	8004c52 <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f043 0206 	orr.w	r2, r3, #6
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c5e:	b004      	add	sp, #16
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	ffbdffbf 	.word	0xffbdffbf

08004c68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f023 0201 	bic.w	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	460b      	mov	r3, r1
 8004c94:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d115      	bne.n	8004cd8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cb8:	200a      	movs	r0, #10
 8004cba:	f7fc fc0d 	bl	80014d8 <HAL_Delay>
      ms += 10U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	330a      	adds	r3, #10
 8004cc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fa37 	bl	8005138 <USB_GetMode>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d01e      	beq.n	8004d0e <USB_SetCurrentMode+0x84>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2bc7      	cmp	r3, #199	@ 0xc7
 8004cd4:	d9f0      	bls.n	8004cb8 <USB_SetCurrentMode+0x2e>
 8004cd6:	e01a      	b.n	8004d0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d115      	bne.n	8004d0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cea:	200a      	movs	r0, #10
 8004cec:	f7fc fbf4 	bl	80014d8 <HAL_Delay>
      ms += 10U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	330a      	adds	r3, #10
 8004cf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa1e 	bl	8005138 <USB_GetMode>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <USB_SetCurrentMode+0x84>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d06:	d9f0      	bls.n	8004cea <USB_SetCurrentMode+0x60>
 8004d08:	e001      	b.n	8004d0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e005      	b.n	8004d1a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d12:	d101      	bne.n	8004d18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d24:	b084      	sub	sp, #16
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b086      	sub	sp, #24
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d3e:	2300      	movs	r3, #0
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	e009      	b.n	8004d58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	3340      	adds	r3, #64	@ 0x40
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	2200      	movs	r2, #0
 8004d50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	3301      	adds	r3, #1
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b0e      	cmp	r3, #14
 8004d5c:	d9f2      	bls.n	8004d44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d11c      	bne.n	8004da0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d74:	f043 0302 	orr.w	r3, r3, #2
 8004d78:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	e005      	b.n	8004dac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004db2:	461a      	mov	r2, r3
 8004db4:	2300      	movs	r3, #0
 8004db6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004db8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d10d      	bne.n	8004ddc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d104      	bne.n	8004dd2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dc8:	2100      	movs	r1, #0
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f97a 	bl	80050c4 <USB_SetDevSpeed>
 8004dd0:	e01a      	b.n	8004e08 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f975 	bl	80050c4 <USB_SetDevSpeed>
 8004dda:	e015      	b.n	8004e08 <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004ddc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d10d      	bne.n	8004e00 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dec:	2100      	movs	r1, #0
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f968 	bl	80050c4 <USB_SetDevSpeed>
 8004df4:	e008      	b.n	8004e08 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004df6:	2101      	movs	r1, #1
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f963 	bl	80050c4 <USB_SetDevSpeed>
 8004dfe:	e003      	b.n	8004e08 <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e00:	2103      	movs	r1, #3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f95e 	bl	80050c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e08:	2110      	movs	r1, #16
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8fa 	bl	8005004 <USB_FlushTxFifo>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f924 	bl	8005068 <USB_FlushRxFifo>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e30:	461a      	mov	r2, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	2300      	movs	r3, #0
 8004e40:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	e043      	b.n	8004edc <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e6a:	d118      	bne.n	8004e9e <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	e013      	b.n	8004eb0 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e94:	461a      	mov	r2, r3
 8004e96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	e008      	b.n	8004eb0 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2300      	movs	r3, #0
 8004eae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ed4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d3b5      	bcc.n	8004e54 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	e043      	b.n	8004f76 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f04:	d118      	bne.n	8004f38 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	e013      	b.n	8004f4a <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e008      	b.n	8004f4a <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f44:	461a      	mov	r2, r3
 8004f46:	2300      	movs	r3, #0
 8004f48:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f56:	461a      	mov	r2, r3
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	3301      	adds	r3, #1
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d3b5      	bcc.n	8004eee <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f94:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004fa2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fa4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f043 0210 	orr.w	r2, r3, #16
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699a      	ldr	r2, [r3, #24]
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004ffc <USB_DevInit+0x2d8>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f043 0208 	orr.w	r2, r3, #8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fd8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d105      	bne.n	8004fec <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <USB_DevInit+0x2dc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ff8:	b004      	add	sp, #16
 8004ffa:	4770      	bx	lr
 8004ffc:	803c3800 	.word	0x803c3800
 8005000:	40000004 	.word	0x40000004

08005004 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3301      	adds	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800501e:	d901      	bls.n	8005024 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e01b      	b.n	800505c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	daf2      	bge.n	8005012 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	019b      	lsls	r3, r3, #6
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005048:	d901      	bls.n	800504e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e006      	b.n	800505c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b20      	cmp	r3, #32
 8005058:	d0f0      	beq.n	800503c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3301      	adds	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005080:	d901      	bls.n	8005086 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e018      	b.n	80050b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	daf2      	bge.n	8005074 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2210      	movs	r2, #16
 8005096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3301      	adds	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050a4:	d901      	bls.n	80050aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e006      	b.n	80050b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d0f0      	beq.n	8005098 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050e4:	4313      	orrs	r3, r2
 80050e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005110:	f023 0303 	bic.w	r3, r3, #3
 8005114:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005124:	f043 0302 	orr.w	r3, r3, #2
 8005128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f003 0301 	and.w	r3, r3, #1
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3301      	adds	r3, #1
 8005164:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800516c:	d901      	bls.n	8005172 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e01b      	b.n	80051aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	daf2      	bge.n	8005160 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f043 0201 	orr.w	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3301      	adds	r3, #1
 800518e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005196:	d901      	bls.n	800519c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e006      	b.n	80051aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d0f0      	beq.n	800518a <USB_CoreReset+0x36>

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <memset>:
 80051b6:	4402      	add	r2, r0
 80051b8:	4603      	mov	r3, r0
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d100      	bne.n	80051c0 <memset+0xa>
 80051be:	4770      	bx	lr
 80051c0:	f803 1b01 	strb.w	r1, [r3], #1
 80051c4:	e7f9      	b.n	80051ba <memset+0x4>
	...

080051c8 <__libc_init_array>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005200 <__libc_init_array+0x38>)
 80051cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005204 <__libc_init_array+0x3c>)
 80051ce:	1b64      	subs	r4, r4, r5
 80051d0:	10a4      	asrs	r4, r4, #2
 80051d2:	2600      	movs	r6, #0
 80051d4:	42a6      	cmp	r6, r4
 80051d6:	d109      	bne.n	80051ec <__libc_init_array+0x24>
 80051d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005208 <__libc_init_array+0x40>)
 80051da:	4c0c      	ldr	r4, [pc, #48]	@ (800520c <__libc_init_array+0x44>)
 80051dc:	f000 f826 	bl	800522c <_init>
 80051e0:	1b64      	subs	r4, r4, r5
 80051e2:	10a4      	asrs	r4, r4, #2
 80051e4:	2600      	movs	r6, #0
 80051e6:	42a6      	cmp	r6, r4
 80051e8:	d105      	bne.n	80051f6 <__libc_init_array+0x2e>
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f0:	4798      	blx	r3
 80051f2:	3601      	adds	r6, #1
 80051f4:	e7ee      	b.n	80051d4 <__libc_init_array+0xc>
 80051f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fa:	4798      	blx	r3
 80051fc:	3601      	adds	r6, #1
 80051fe:	e7f2      	b.n	80051e6 <__libc_init_array+0x1e>
 8005200:	0800536c 	.word	0x0800536c
 8005204:	0800536c 	.word	0x0800536c
 8005208:	0800536c 	.word	0x0800536c
 800520c:	08005370 	.word	0x08005370

08005210 <memcpy>:
 8005210:	440a      	add	r2, r1
 8005212:	4291      	cmp	r1, r2
 8005214:	f100 33ff 	add.w	r3, r0, #4294967295
 8005218:	d100      	bne.n	800521c <memcpy+0xc>
 800521a:	4770      	bx	lr
 800521c:	b510      	push	{r4, lr}
 800521e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005226:	4291      	cmp	r1, r2
 8005228:	d1f9      	bne.n	800521e <memcpy+0xe>
 800522a:	bd10      	pop	{r4, pc}

0800522c <_init>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	bf00      	nop
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr

08005238 <_fini>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr
